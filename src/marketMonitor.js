// src/marketMonitor.js
import { httpGetWithRetry } from './httpClient.js';
import { resolveUserLang } from './cache.js';
import { usersCollection, client } from './db.js';
import { MARKET_BATCH_SIZE, MARKET_BATCH_PAUSE_MS } from './constants.js';

const symbolsCfg = {
  BTC: { binance: 'BTCUSDT', coingecko: 'bitcoin' },
  ETH: { binance: 'ETHUSDT', coingecko: 'ethereum' },
  PAXG: { binance: null, coingecko: 'pax-gold' }
};

const HARD_TIMEOUT_MS = 8000;

const UA = { headers: { 'User-Agent': 'Mozilla/5.0 Chrome/120' } };

const esc = (s) => String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
const B = (s) => `<b>${esc(s)}</b>`;
const U = (s) => `<u>${esc(s)}</u>`;
const BU = (s) => `<b><u>${esc(s)}</u></b>`;

function humanFmt(n) {
  if (!Number.isFinite(n)) return '‚Äî';
  try {
    if (Math.abs(n) >= 1_000_000) return Intl.NumberFormat('en-US',{maximumFractionDigits:0}).format(Math.round(n));
    if (Math.abs(n) >= 1000)      return Intl.NumberFormat('en-US',{maximumFractionDigits:0}).format(Math.round(n));
    if (Math.abs(n) >= 1)         return Intl.NumberFormat('en-US',{maximumFractionDigits:2}).format(Number(n.toFixed(2)));
    return Number(n).toPrecision(6).replace(/(?:\.0+|(?<=\.[0-9]*?)0+)$/,'');
  } catch { return String(n); }
}
const nearZero = (v) => Number.isFinite(v) && Math.abs(v) < 1e-8;

function fmtFunding(v) { if(!Number.isFinite(v)) return '‚Äî'; return Number(v).toFixed(8).replace(/\.0+$|0+$/,''); }
function circleByDelta(x) { if(!Number.isFinite(x) || x===0) return '‚ö™'; return x>0?'üü¢':'üî¥'; }
function pctStr(v) { return `${v>0?'+':''}${v.toFixed(2)}%`; }

function computeRSI(closes=[], period=14) {
  try {
    if(!Array.isArray(closes)||closes.length<period+1) return null;
    let gains=0,losses=0;
    for(let i=1;i<=period;i++){ const d=closes[i]-closes[i-1]; if(d>0) gains+=d; else losses+=Math.abs(d); }
    let avgGain=gains/period, avgLoss=losses/period;
    for(let i=period+1;i<closes.length;i++){ const d=closes[i]-closes[i-1]; avgGain=((avgGain*(period-1))+Math.max(0,d))/period; avgLoss=((avgLoss*(period-1))+Math.max(0,-d))/period; }
    if(avgLoss===0) return 100;
    const rs=avgGain/avgLoss, rsi=100-(100/(1+rs));
    return Number.isFinite(rsi)?Number(rsi.toFixed(2)):null;
  }catch{return null;}
}

function riskBar(score){
  const n=Math.max(0,Math.min(10,Math.round((score||0)*10)));
  return 'üü•'.repeat(n)+'‚¨ú'.repeat(10-n);
}

function priceChangeRisk(pct24h){
  if(!Number.isFinite(pct24h)) return 0;
  const mag = Math.min(1, Math.abs(pct24h)/8);
  return mag;
}
function fundingRiskFromNow(f){
  if(!Number.isFinite(f)) return 0;
  return Math.min(1, Math.abs(f)*10000/30);
}
function sentimentRiskFromLS(longPct){
  if(!Number.isFinite(longPct)) return 0;
  if(longPct>=60) return Math.min(1, (longPct-60)/15);
  if(longPct<=40) return Math.min(1, (40-longPct)/15);
  return 0;
}
function aggregateScore({ priceRisk, fundingRisk=0, sentimentRisk=0 }){
  const s = 0.5*priceRisk + 0.2*fundingRisk + 0.3*sentimentRisk;
  return Math.max(0, Math.min(1, s));
}

function fearGreedBarColorized(v){
  const val = Number(v);
  if (!Number.isFinite(val) || val < 0 || val > 100) return '‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú';
  const filled = Math.max(0, Math.min(10, Math.round(val/10)));
  let color = 'üü®';
  if (val <= 24) color = 'üü•';
  else if (val <= 44) color = 'üüß';
  else if (val <= 54) color = 'üü®';
  else if (val <= 74) color = 'üü©';
  else color = 'üü©';
  return color.repeat(filled) + '‚¨ú'.repeat(10 - filled);
}
function translateFgiClass(cls, isEn) {
  if (!cls) return null;
  const dict = {
    'Extreme Fear': { ru: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö', en: 'Extreme Fear' },
    'Fear':         { ru: '–°—Ç—Ä–∞—Ö',               en: 'Fear' },
    'Neutral':      { ru: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',          en: 'Neutral' },
    'Greed':        { ru: '–ñ–∞–¥–Ω–æ—Å—Ç—å',            en: 'Greed' },
    'Extreme Greed':{ ru: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å', en: 'Extreme Greed' }
  };
  const rec = dict[cls] || null;
  return isEn ? (rec?.en || cls) : (rec?.ru || cls);
}
function abbrevWithUnit(n, isEn=false) {
  if(!Number.isFinite(n)) return '';
  const v = Math.abs(n);
  if (v >= 1_000_000_000_000) return `${(v/1_000_000_000_000).toFixed(2)} ${isEn?'T':'—Ç—Ä–ª–Ω'}`;
  if (v >= 1_000_000_000)     return `${(v/1_000_000_000).toFixed(2)} ${isEn?'B':'–º–ª—Ä–¥'}`;
  if (v >= 1_000_000)         return `${(v/1_000_000).toFixed(2)} ${isEn?'M':'–º–ª–Ω'}`;
  if (v >= 1_000)             return `${(v/1_000).toFixed(2)} ${isEn?'K':'—Ç—ã—Å.'}`;
  return `${v.toFixed(2)}`;
}
function renderLsBlock(ls, isEn, label){
  const lbl = label || (isEn ? 'Asset' : '–ê–∫—Ç–∏–≤');
  if (!ls || !Number.isFinite(ls.longPct) || !Number.isFinite(ls.shortPct)) return `${lbl}: ‚Äî`;
  const greens = Math.max(0, Math.min(10, Math.round(ls.longPct/10)));
  const reds   = 10 - greens;
  const bar = 'üü©'.repeat(greens) + 'üü•'.repeat(reds);
  return `${lbl}:\n‚Ä¢ Longs ${B(`${ls.longPct}%`)} | Shorts ${B(`${ls.shortPct}%`)}\n${bar}`;
}
function formatKyiv(tsEpoch, tsIso) {
  try {
    const d = Number.isFinite(Number(tsEpoch)) ? new Date(Number(tsEpoch)) : (tsIso ? new Date(tsIso) : new Date());
    const ru = new Intl.DateTimeFormat('ru-RU',{ timeZone:'Europe/Kyiv', year:'numeric', month:'2-digit', day:'2-digit', hour:'2-digit', minute:'2-digit' }).format(d);
    const en = new Intl.DateTimeFormat('en-GB',{ timeZone:'Europe/Kyiv', year:'numeric', month:'2-digit', day:'2-digit', hour:'2-digit', minute:'2-digit' }).format(d);
    return { ru, en };
  } catch {
    return { ru: String(tsIso||tsEpoch||''), en: String(tsIso||tsEpoch||'') };
  }
}

function concisePriceAdvice(pct){
  if (!Number.isFinite(pct)) return '–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑ —Å–µ—Ç–∞–ø–∞.';
  if (pct >= 3) return '–î–µ—Ä–∂–∞—Ç—å/—á–∞—Å—Ç–∏—á–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å; –Ω–µ –¥–æ–≥–æ–Ω—è—Ç—å –∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø–ª–µ—á–æ.';
  if (pct >= 1) return '–î–µ—Ä–∂–∞—Ç—å/–º—è–≥–∫–∏–π DCA; –∏–∑–±–µ–≥–∞—Ç—å –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –ª–æ–Ω–≥–æ–≤ —Å –ø–ª–µ—á–æ–º.';
  if (pct <= -3) return '–ñ–¥–∞—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞; –Ω–µ –ª–æ–≤–∏—Ç—å –Ω–æ–∂–∏, —Ä–∞–∑–º–µ—Ä —Å–Ω–∏–∂–∞—Ç—å.';
  if (pct <= -1) return '–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.';
  return '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ; –≤—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ —Å–∏–≥–Ω–∞–ª—É.';
}
function conciseVolAdvice(delta){
  if (!Number.isFinite(delta)) return '–°–º–æ—Ç—Ä–∏ –¥—Ä—É–≥–∏–µ —Å–∏–≥–Ω–∞–ª—ã; –Ω–µ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –ø–æ –æ–±—ä—ë–º—É.';
  if (delta > 5) return '–û–±—ä—ë–º —Ä–∞—Å—Ç–µ—Ç ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞; —Å–æ–±–ª—é–¥–∞–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç.';
  if (delta < -5) return '–û–±—ä—ë–º —Å–ª–∞–±–µ–µ—Ç ‚Äî —Å–Ω–∏–∑–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏—é, –±—Ä–∞—Ç—å A+ —Å–µ—Ç–∞–ø—ã.';
  return '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ; —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.';
}
function conciseRsiAdvice(v){
  if (!Number.isFinite(v)) return '–ë–µ–∑ RSI ‚Äî –æ–ø–æ—Ä–∞ –Ω–∞ —Ü–µ–Ω—É/–æ–±—ä—ë–º.';
  if (v >= 70) return '–†–∏—Å–∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî —É–∂–∞—Ç—å —Ä–∏—Å–∫, –∏—Å–∫–∞—Ç—å –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏.';
  if (v <= 30) return '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –∂–¥–∞—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞, –Ω–µ —à–æ—Ä—Ç–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.';
  return '–ò–º–ø—É–ª—å—Å –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É –∏ —Å—Ç–æ–ø–∞–º.';
}
function conciseFlowsAdvice(usd){
  if (!Number.isFinite(usd)) return '–ù–µ –ø–æ–ª–∞–≥–∞–π—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ; —Ä–µ—à–µ–Ω–∏—è –ø–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.';
  if (usd > 0) return '–ü—Ä–∏—Ç–æ–∫ ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏; –Ω–µ –≤—Ö–æ–¥–∏—Ç—å all-in –Ω–∞ —Ä–æ—Å—Ç–µ.';
  if (usd < 0) return '–û—Ç—Ç–æ–∫ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞; –ª–æ–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.';
  return '–†–æ–≤–Ω–æ ‚Äî –¥–µ—Ä–∂–∞—Ç—å –ø–ª–∞–Ω; –Ω–µ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –ø–æ –ø–æ—Ç–æ–∫–∞–º.';
}
function conciseFundingAdvice(f){
  if (!Number.isFinite(f)) return '–û—Ü–µ–Ω–∏–≤–∞–π –±–µ–∑ funding; –Ω–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É.';
  if (Math.abs(f) > 0.0003) return '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π funding ‚Äî —Ä–µ–∑–∞—Ç—å –ø–ª–µ—á–æ, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–∫–≤–∏–∑–∞–º.';
  return '–£–º–µ—Ä–µ–Ω–Ω—ã–π funding ‚Äî –ø–ª–µ—á–æ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.';
}
function conciseLsAdvice(longPct){
  if (!Number.isFinite(longPct)) return '–°–º–æ—Ç—Ä–∏ —Ü–µ–Ω—É/–æ–±—ä—ë–º; L/S –º–∞–ª–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å.';
  if (longPct > 65) return '–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã –ª–æ–Ω–≥–∏ ‚Äî —Ä–∏—Å–∫ –ª–æ–Ω–≥-—Å–∫–≤–∏–∑–∞; –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–ª–µ—á–æ.';
  if (longPct < 45) return '–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã —à–æ—Ä—Ç—ã ‚Äî —Ä–∏—Å–∫ —à–æ—Ä—Ç-—Å–∫–≤–∏–∑–∞; –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —à–æ—Ä—Ç–∞–º–∏.';
  return '–ë–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ü–∏–π ‚Äî –±–µ–∑ –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π.';
}
function conciseRiskAdvice(score){
  const pct = Math.round((Number(score)||0)*100);
  if (pct >= 60) return '–°–Ω–∏–∂–∞—Ç—å —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é, —á–∞—Å—Ç–∏—á–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å; –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ª–æ–Ω–≥–∏.';
  if (pct >= 30) return '–†–µ–∑–∞—Ç—å –ø–ª–µ—á–æ, —Ç—è–Ω—É—Ç—å —Å—Ç–æ–ø—ã; –Ω–µ —Ä–∞–∑–≥–æ–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é.';
  if (pct >= 10) return '–í—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é; –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–ª–µ—á–æ.';
  return '–î–µ—Ä–∂–∞—Ç—å/–∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É—Å—Ä–µ–¥–Ω—è—Ç—å; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.';
}

function flowsHeaderLine(sym, isEn){
  const now = Number(sym?.netFlowsUSDNow);
  const prev = Number(sym?.netFlowsUSDPrev);
  const diff = Number(sym?.netFlowsUSDDiff);
  if (!Number.isFinite(now) && !Number.isFinite(prev)) return '‚Äî';
  const sNowMoney = Number.isFinite(now) ? `${now>=0?'+':'‚àí'}$${humanFmt(Math.abs(now))}` : '‚Äî';
  const sNowAbbr  = Number.isFinite(now) ? `${now>=0?'+':'‚àí'}${abbrevWithUnit(Math.abs(now), isEn)}` : '';
  let deltaPart = '';
  if (Number.isFinite(prev) && Math.abs(prev) > 0 && Number.isFinite(diff)) {
    const diffPct = (diff/Math.abs(prev))*100;
    if (Number.isFinite(diffPct)) {
      const circ = circleByDelta(diffPct);
      deltaPart = ` ${circ}(${B(pctStr(diffPct))} ${isEn?'vs prev 24h':'–∫ –ø—Ä–µ–¥. 24—á'})`;
    }
  }
  return `${B(`${sNowMoney}`)} (${B(sNowAbbr)})${deltaPart}`;
}

export async function buildMorningReportHtml(snapshots, lang='ru', tsIsoKyiv='', tsEpoch=null){
  const isEn=String(lang).toLowerCase().startsWith('en');

  const T=isEn?{
    report:'REPORT',
    asof:'As of',
    price:'Price *¬π',
    fgi:'Fear & Greed *¬≤',
    volumes:'24h Volume *¬≥',
    rsi:'RSI (14) *‚Å¥',
    flows:'Net flows *‚Åµ',
    funding:'Funding rate (avg) *‚Å∂',
    ls:'Longs vs Shorts *‚Å∑',
    risks:'Risk *‚Å∏',
    over24h:'over 24h',
    ref:'Reference',
    updatesNote:'updates every 30 min'
  }:{
    report:'–û–¢–ß–ï–¢',
    asof:'–î–∞–Ω–Ω—ã–µ –Ω–∞',
    price:'–¶–µ–Ω–∞ *¬π',
    fgi:'–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ *¬≤',
    volumes:'–û–±—ä–µ–º 24 —á *¬≥',
    rsi:'RSI (14) *‚Å¥',
    flows:'–ü—Ä–∏—Ç–æ–∫–∏/–æ—Ç—Ç–æ–∫–∏ *‚Åµ',
    funding:'Funding rate (avg) *‚Å∂',
    ls:'–õ–æ–Ω–≥–∏ vs –®–æ—Ä—Ç—ã *‚Å∑',
    risks:'–†–∏—Å–∫ *‚Å∏',
    over24h:'–∑–∞ 24 —á–∞—Å–∞',
    ref:'–°–ø—Ä–∞–≤–∫–∞',
    updatesNote:'–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω'
  };

  const when = formatKyiv(tsEpoch, tsIsoKyiv);
  const asOf = isEn ? when.en : when.ru;
  const tzSuffix = ' (Europe/Kyiv)';

  const priceLine = (sym, label) => {
    const pct = Number(sym?.pct24);
    const circ = circleByDelta(pct);
    const pctTxt = Number.isFinite(pct) ? `${circ} (${B(`${pct>0?'+':''}${pct.toFixed(2)}%`)} ${T.over24h})` : '(‚Äî)';
    const p = Number.isFinite(sym?.price) ? `$${humanFmt(sym.price)}` : '‚Äî';
    const lbl = label ? `${label} ` : '';
    return `${lbl}${B(p)} ${pctTxt}`;
  };
  const fgiLine = (sym) => {
    const v = Number(sym?.fgiValue);
    const clsRaw = sym?.fgiClass || null;
    if (!Number.isFinite(v)) return '‚Äî';
    const cls = translateFgiClass(clsRaw, isEn);
    const bar = fearGreedBarColorized(v);
    return `${B(String(v))}${cls ? ` (${B(cls)})` : ''}\n${bar}`;
  };
  const volumeLine = (sym) => {
    const vol = Number(sym?.vol24);
    const deltaPct = Number(sym?.volDeltaPct);
    const circ = circleByDelta(deltaPct);
    const fullMoney = Number.isFinite(vol) ? `$${humanFmt(vol)}` : '‚Äî';
    const abbrVal = Number.isFinite(vol) ? abbrevWithUnit(vol, isEn) : '';
    const abbr = abbrVal ? `(${B(abbrVal)})` : '';
    const pctTxt = Number.isFinite(deltaPct) ? `${circ}(${B(`${deltaPct>0?'+':''}${deltaPct.toFixed(2)}%`)} ${T.over24h})` : '(‚Äî)';
    return `${B(fullMoney)} ${abbr} ${pctTxt}`;
  };
  const rsiLine = (sym) => {
    const now = Number(sym?.rsi14), prev = Number(sym?.rsi14Prev);
    if(!Number.isFinite(now)) return '‚Äî';
    const base = B(humanFmt(now));
    if(Number.isFinite(prev)){
      const d = now - prev;
      const bps = d * 10000;
      const circ = circleByDelta(d);
      const dTxt = `${circ}(${B(`${d>0?'+':''}${d.toFixed(2)}`)} ${T.over24h}, ${B(`${d>0?'+':''}${Math.round(bps)} –±.–ø.`)})`;
      return `${base} ${dTxt}`;
    }
    return base;
  };
  const fundingLine = (sym) => {
    const now = Number(sym?.fundingNow);
    const prev = Number(sym?.fundingPrev);
    if(!Number.isFinite(now) || nearZero(now)) return '‚Äî';
    const base = B(fmtFunding(now));
    if(Number.isFinite(prev) && !nearZero(prev)){
      const d = now - prev;
      const circ = circleByDelta(d);
      const bps = d * 10000;
      const dTxt = `${circ}(${B(`${d>0?'+':''}${fmtFunding(d)}`)} ${T.over24h}, ${B(`${(bps>0?'+':'')}${(bps).toFixed(2)} –±.–ø.`)})`;
      return `${base} ${dTxt}`;
    }
    return base;
  };

  const lines=[];
  lines.push(`üìä ${BU(T.report)}`);
  lines.push('');

  lines.push(BU(T.price));
  if (snapshots.BTC) lines.push(`BTC ${priceLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) lines.push(`ETH ${priceLine((snapshots.ETH)||{})}`);
  if (snapshots.PAXG) {
    const lbl = isEn ? 'PAXG (tokenized gold) ' : 'PAXG (—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ) ';
    lines.push(priceLine((snapshots.PAXG)||{}, lbl));
  }
  lines.push('');

  lines.push(BU(T.fgi));
  lines.push(`‚Ä¢ ${fgiLine((snapshots.BTC)||{})}`);
  lines.push('');

  lines.push(BU(T.volumes));
  if (snapshots.BTC) lines.push(`‚Ä¢ BTC: ${volumeLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ETH: ${volumeLine((snapshots.ETH)||{})}`);
  lines.push('');

  lines.push(BU(T.rsi));
  if (snapshots.BTC) lines.push(`‚Ä¢ BTC: ${rsiLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ETH: ${rsiLine((snapshots.ETH)||{})}`);
  lines.push('');

  lines.push(BU(T.flows));
  if (snapshots.BTC) lines.push(`‚Ä¢ BTC: ${flowsHeaderLine((snapshots.BTC)||{}, isEn)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ETH: ${flowsHeaderLine((snapshots.ETH)||{}, isEn)}`);
  lines.push('');

  lines.push(BU(T.funding));
  if (snapshots.BTC) lines.push(`‚Ä¢ BTC: ${fundingLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ETH: ${fundingLine((snapshots.ETH)||{})}`);
  lines.push('');

  lines.push(BU(T.ls));
  if (snapshots.BTC) lines.push(renderLsBlock(((snapshots.BTC)||{}).longShort, isEn, 'BTC'));
  if (snapshots.ETH) lines.push(renderLsBlock(((snapshots.ETH)||{}).longShort, isEn, 'ETH'));
  lines.push('');

  lines.push(BU(T.risks));
  const scoreBTC = aggregateScore({
    priceRisk: priceChangeRisk((snapshots.BTC||{}).pct24),
    fundingRisk: fundingRiskFromNow((snapshots.BTC||{}).fundingNow),
    sentimentRisk: sentimentRiskFromLS((snapshots.BTC||{}).longShort?.longPct)
  });
  const scoreETH = aggregateScore({
    priceRisk: priceChangeRisk((snapshots.ETH||{}).pct24),
    fundingRisk: fundingRiskFromNow((snapshots.ETH||{}).fundingNow),
    sentimentRisk: sentimentRiskFromLS((snapshots.ETH||{}).longShort?.longPct)
  });
  const rBbar = `${riskBar(scoreBTC)} ${B(`${Math.round(scoreBTC*100)}%`)}`;
  const rEbar = `${riskBar(scoreETH)} ${B(`${Math.round(scoreETH*100)}%`)}`;
  if (snapshots.BTC) lines.push(`‚Ä¢ BTC:\n${rBbar}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ETH:\n${rEbar}`);
  lines.push('');

  lines.push(BU(T.ref));
  lines.push('');

  lines.push(`${B('¬π –¶–µ–Ω–∞: —Å–ø–æ—Ç.')} ‚Äî –∫—Ä–∞—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á.`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${concisePriceAdvice((snapshots.BTC||{}).pct24)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${concisePriceAdvice((snapshots.ETH||{}).pct24)}`);
  if (snapshots.PAXG) lines.push(`‚Ä¢ ${B('PAXG:')} ${concisePriceAdvice((snapshots.PAXG||{}).pct24)}`);

  const fgiVal = Number((snapshots.BTC||{}).fgiValue);
  let fgiAdvice = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ ‚Äî –¥–µ—Ä–∂–∞—Ç—å –ø–ª–∞–Ω; –Ω–µ –±–µ–≥–∞—Ç—å –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º.';
  if (Number.isFinite(fgiVal)) {
    if (fgiVal <= 25) fgiAdvice = '–°—Ç—Ä–∞—Ö ‚Äî –≤—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º; –Ω–µ —É—Å—Ä–µ–¥–Ω—è—Ç—å –±–µ–∑ —Å—Ç–æ–ø–∞.';
    else if (fgiVal >= 75) fgiAdvice = '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å ‚Äî —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è; –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ª–æ–Ω–≥–∏.';
    else if (fgiVal >= 55) fgiAdvice = '–ñ–∞–¥–Ω–æ—Å—Ç—å ‚Äî —Å–Ω–∏–∂–∞—Ç—å –ø–ª–µ—á–æ; —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.';
  }

  lines.push('');
  lines.push(`${B('¬≤ –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏')} ‚Äî —Å–≤–æ–¥–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ BTC.`);
  lines.push(`‚Ä¢ ${B('BTC/Market:')} ${fgiAdvice}`);

  lines.push('');
  lines.push(`${B('¬≥ –û–±—ä–µ–º 24 —á')} ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç/–æ—Å–ª–∞–±–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã.`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${conciseVolAdvice((snapshots.BTC||{}).volDeltaPct)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${conciseVolAdvice((snapshots.ETH||{}).volDeltaPct)}`);

  lines.push('');
  lines.push(`${B('‚Å¥ RSI(14)')} ‚Äî –∏–º–ø—É–ª—å—Å: ‚âà70 –ø–µ—Ä–µ–≥—Ä–µ–≤, ‚âà30 –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å.`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${conciseRsiAdvice((snapshots.BTC||{}).rsi14)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${conciseRsiAdvice((snapshots.ETH||{}).rsi14)}`);

  lines.push('');
  lines.push(`${B('‚Åµ Net flows')} ‚Äî —á–∏—Å—Ç—ã–µ –ø—Ä–∏—Ç–æ–∫–∏/–æ—Ç—Ç–æ–∫–∏ –Ω–∞ –±–∏—Ä–∂–∏ (–ø—Ä–∏—Ç–æ–∫ = –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏, –æ—Ç—Ç–æ–∫ = –ø–æ–¥–¥–µ—Ä–∂–∫–∞).`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${conciseFlowsAdvice((snapshots.BTC||{}).netFlowsUSDNow)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${conciseFlowsAdvice((snapshots.ETH||{}).netFlowsUSDNow)}`);

  lines.push('');
  lines.push(`${B('‚Å∂ Funding')} ‚Äî —Å—Ç–∞–≤–∫–∞ –º–µ–∂–¥—É –ª–æ–Ω–≥–∞–º–∏ –∏ —à–æ—Ä—Ç–∞–º–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö.`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${conciseFundingAdvice((snapshots.BTC||{}).fundingNow)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${conciseFundingAdvice((snapshots.ETH||{}).fundingNow)}`);

  lines.push('');
  lines.push(`${B('‚Å∑ –õ–æ–Ω–≥–∏/–®–æ—Ä—Ç—ã (L/S)')} ‚Äî –ø–µ—Ä–µ–∫–æ—Å –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ —Å–∫–≤–∏–∑–∞.`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${conciseLsAdvice((snapshots.BTC||{}).longShort?.longPct)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${conciseLsAdvice((snapshots.ETH||{}).longShort?.longPct)}`);

  lines.push('');
  lines.push(`${B('‚Å∏ –†–∏—Å–∫')} ‚Äî –∞–≥—Ä–µ–≥–∞—Ç —Ü–µ–Ω—ã, funding –∏ L/S (0% –Ω–∏–∑–∫–∏–π, 100% –≤—ã—Å–æ–∫–∏–π).`);
  if (snapshots.BTC) lines.push(`‚Ä¢ ${B('BTC:')} ${conciseRiskAdvice(scoreBTC)}`);
  if (snapshots.ETH) lines.push(`‚Ä¢ ${B('ETH:')} ${conciseRiskAdvice(scoreETH)}`);

  if (asOf) {
    lines.push('');
    lines.push(`${T.asof}: ${B(`${asOf}${tzSuffix}`)} - ${T.updatesNote}`);
  }

  return lines.join('\n');
}

function pickSubsetBySymbols(snapshots, symbols){
  const out={};
  for(const s of symbols){ if (snapshots?.[s]) out[s]=snapshots[s]; }
  return out;
}

export async function getMarketSnapshot(symbols=['BTC','ETH','PAXG']){
  const dbName = process.env.DB_NAME || 'crypto_alert_dev';
  const collection = process.env.COLLECTION || 'marketSnapshots';
  const db = client.db(dbName);
  const doc = await db.collection(collection).find().sort({ at: -1 }).limit(1).next();
  if (!doc || !doc.snapshots) return { ok:false, reason:'no_snapshot' };
  const subset = pickSubsetBySymbols(doc.snapshots, symbols);
  return { ok:true, snapshots: subset, fetchedAt: doc.at, atIsoKyiv: doc.atIsoKyiv || '' };
}

export async function startMarketMonitor(){ return { ok:true }; }

export async function broadcastMarketSnapshot(bot, { batchSize=MARKET_BATCH_SIZE || 25, pauseMs=MARKET_BATCH_PAUSE_MS || 400 } = {}){
  if (!usersCollection) return { ok:false, reason:'mongo_not_connected' };

  const recipients = await usersCollection.find(
    { botBlocked: { $ne: true }, sendMarketReport: { $ne: false } },
    { projection: { userId: 1, lang: 1 } }
  ).toArray();

  if (!recipients.length) return { ok:true, delivered:0, users:0, batchSize, pauseMs };

  const snap = await getMarketSnapshot(['BTC','ETH','PAXG']).catch(()=>null);
  if (!snap?.ok) return { ok:false, reason:'snapshot_failed', delivered:0, users:recipients.length };

  const { snapshots, atIsoKyiv, fetchedAt } = snap;

  const [ruHtml, enHtml] = await Promise.all([
    buildMorningReportHtml(snapshots, 'ru', atIsoKyiv, fetchedAt),
    buildMorningReportHtml(snapshots, 'en', atIsoKyiv, fetchedAt)
  ]);

  let delivered = 0;
  for (let i = 0; i < recipients.length; i += batchSize) {
    const chunk = recipients.slice(i, i + batchSize);
    await Promise.all(chunk.map(async (u) => {
      try {
        const lang = await resolveUserLang(u.userId).catch(() => u.lang || 'ru');
        const html = String(lang || '').toLowerCase().startsWith('en') ? enHtml : ruHtml;
        await bot.telegram.sendMessage(u.userId, html, { parse_mode:'HTML' });
        delivered++;
      } catch (err) {
        const code = err?.response?.error_code;
        const description = err?.response?.description || String(err?.message || err);
        if (code === 403 || /bot was blocked/i.test(description)) {
          try {
            await usersCollection.updateOne(
              { userId: u.userId },
              { $set: { botBlocked: true, botBlockedAt: new Date() } },
              { upsert: true }
            );
          } catch {}
        }
      }
    }));
    if (i + batchSize < recipients.length) {
      await new Promise(r => setTimeout(r, pauseMs));
    }
  }

  return { ok:true, delivered, users: recipients.length, batchSize, pauseMs };
}

export async function sendMarketReportToUser(bot, userId){
  const snap=await getMarketSnapshot(['BTC','ETH','PAXG']);
  if(!snap?.ok) return { ok:false };
  const lang=await resolveUserLang(userId).catch(()=> 'ru');
  const html=await buildMorningReportHtml(snap.snapshots, lang, snap.atIsoKyiv || '', snap.fetchedAt ?? null);
  await bot.telegram.sendMessage(userId, html, { parse_mode:'HTML' });
  return { ok:true };
}
