// src/marketMonitor.js
import { resolveUserLang } from './cache.js';
import { usersCollection, client } from './db.js';
import { MARKET_BATCH_SIZE, MARKET_BATCH_PAUSE_MS } from './constants.js';

const ADMIN_ID = process.env.CREATOR_ID ? String(process.env.CREATOR_ID) : '';

const esc = (s) => String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
const B = (s) => `<b>${esc(s)}</b>`;
const U = (s) => `<u>${esc(s)}</u>`;
const BU = (s) => `<b><u>${esc(s)}</u></b>`;
const nearZero = (v) => Number.isFinite(v) && Math.abs(v) < 1e-8;
const isNum = (v) => Number.isFinite(Number(v));

function humanFmt(n) {
  if (!Number.isFinite(n)) return '‚Äî';
  try {
    if (Math.abs(n) >= 1000) return Intl.NumberFormat('ru-RU',{maximumFractionDigits:0}).format(Math.round(n));
    if (Math.abs(n) >= 1)   return Intl.NumberFormat('ru-RU',{maximumFractionDigits:2}).format(Number(n.toFixed(2)));
    return Number(n).toPrecision(6).replace(/(?:\.0+$|(?<=\.[0-9]*?)0+)$/,'');
  } catch { return String(n); }
}
function humanFmtEN(n) {
  if (!Number.isFinite(n)) return '‚Äî';
  try {
    if (Math.abs(n) >= 1000) return Intl.NumberFormat('en-US',{maximumFractionDigits:0}).format(Math.round(n));
    if (Math.abs(n) >= 1)   return Intl.NumberFormat('en-US',{maximumFractionDigits:2}).format(Number(n.toFixed(2)));
    return Number(n).toPrecision(6).replace(/(?:\.0+$|(?<=\.[0-9]*?)0+)$/,'');
  } catch { return String(n); }
}
function abbrevWithUnit(n, isEn=false) {
  if(!Number.isFinite(n)) return '';
  const v = Math.abs(n);
  if (v >= 1_000_000_000_000) return `${(v/1_000_000_000_000).toFixed(2)} ${isEn?'T':'—Ç—Ä–ª–Ω'}`;
  if (v >= 1_000_000_000)     return `${(v/1_000_000_000).toFixed(2)} ${isEn?'B':'–º–ª—Ä–¥'}`;
  if (v >= 1_000_000)         return `${(v/1_000_000).toFixed(2)} ${isEn?'M':'–º–ª–Ω'}`;
  if (v >= 1_000)             return `${(v/1_000).toFixed(2)} ${isEn?'K':'—Ç—ã—Å.'}`;
  return `${v.toFixed(2)}`;
}
function fmtFunding(v) { if(!Number.isFinite(v)) return '‚Äî'; return Number(v).toFixed(8).replace(/\.0+$|0+$/,''); }
function circleByDelta(x) { if(!Number.isFinite(x) || x===0) return '‚ö™'; return x>0?'üü¢':'üî¥'; }

function riskBar(score){
  const n=Math.max(0,Math.min(10,Math.round((score||0)*10)));
  return 'üü•'.repeat(n)+'‚¨ú'.repeat(10-n);
}
function priceChangeRisk(pct24h){
  if(!Number.isFinite(pct24h)) return 0;
  const mag = Math.min(1, Math.abs(pct24h)/8);
  return mag;
}
function fundingRiskFromNow(f){
  if(!Number.isFinite(f)) return 0;
  return Math.min(1, Math.abs(f)*10000/30);
}
function sentimentRiskFromLS(longPct){
  if(!Number.isFinite(longPct)) return 0;
  if(longPct>=60) return Math.min(1, (longPct-60)/15);
  if(longPct<=40) return Math.min(1, (40-longPct)/15);
  return 0;
}
function aggregateScore({ priceRisk, fundingRisk=0, sentimentRisk=0 }){
  const s = 0.5*priceRisk + 0.2*fundingRisk + 0.3*sentimentRisk;
  return Math.max(0, Math.min(1, s));
}

function fearGreedBarColorized(v){
  const val = Number(v);
  if (!Number.isFinite(val) || val < 0 || val > 100) return '‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú';
  const filled = Math.max(0, Math.min(10, Math.floor(val/10)));
  let color = 'üü®';
  if (val <= 44) color = 'üü•';
  else if (val <= 54) color = 'üü®';
  else if (val <= 74) color = 'üü©';
  else color = 'üü©';
  return color.repeat(filled) + '‚¨ú'.repeat(10 - filled);
}
function fgiClassFromValue(v, isEn){
  const val = Number(v);
  let key = null;
  if (!Number.isFinite(val)) key = null;
  else if (val <= 24) key = 'Extreme Fear';
  else if (val <= 44) key = 'Fear';
  else if (val <= 54) key = 'Neutral';
  else if (val <= 74) key = 'Greed';
  else key = 'Extreme Greed';
  const dict = {
    'Extreme Fear': { ru: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö', en: 'Extreme Fear' },
    'Fear':         { ru: '–°—Ç—Ä–∞—Ö',               en: 'Fear' },
    'Neutral':      { ru: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',          en: 'Neutral' },
    'Greed':        { ru: '–ñ–∞–¥–Ω–æ—Å—Ç—å',            en: 'Greed' },
    'Extreme Greed':{ ru: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å', en: 'Extreme Greed' }
  };
  if (!key) return null;
  return isEn ? dict[key].en : dict[key].ru;
}
function fgiEmojiFromValue(v){
  const val = Number(v);
  if (!Number.isFinite(val)) return '‚Äî';
  if (val <= 24) return 'üò±';
  if (val <= 44) return 'üòü';
  if (val <= 54) return 'üòê';
  if (val <= 74) return 'üôÇ';
  return 'üòé';
}

function renderLsBlock(ls, isEn, label){
  const lbl = label || (isEn ? 'Asset' : '–ê–∫—Ç–∏–≤');
  if (!ls || !Number.isFinite(ls.longPct) || !Number.isFinite(ls.shortPct)) return `${lbl}: ‚Äî`;
  const greens = Math.max(0, Math.min(10, Math.round(ls.longPct/10)));
  const reds   = 10 - greens;
  const bar = 'üü©'.repeat(greens) + 'üü•'.repeat(reds);
  const L = isEn ? 'Longs' : '–õ–æ–Ω–≥–∏';
  const S = isEn ? 'Shorts' : '–®–æ—Ä—Ç—ã';
  return `${lbl}:\n‚Ä¢ ${L} ${B(`${ls.longPct}%`)} | ${S} ${B(`${ls.shortPct}%`)}\n${bar}`;
}
function formatKyiv(tsEpoch, tsIso) {
  try {
    const d = Number.isFinite(Number(tsEpoch)) && Number(tsEpoch) > 0
      ? new Date(Number(tsEpoch))
      : (tsIso ? new Date(tsIso) : new Date());
    const ru = new Intl.DateTimeFormat('ru-RU',{ timeZone:'Europe/Kyiv', year:'numeric', month:'2-digit', day:'2-digit', hour:'2-digit', minute:'2-digit' }).format(d);
    const en = new Intl.DateTimeFormat('en-GB',{ timeZone:'Europe/Kyiv', year:'numeric', month:'2-digit', day:'2-digit', hour:'2-digit', minute:'2-digit' }).format(d);
    return { ru, en };
  } catch {
    const now = new Date();
    const ru = new Intl.DateTimeFormat('ru-RU',{ timeZone:'Europe/Kyiv', year:'numeric', month:'2-digit', day:'2-digit', hour:'2-digit', minute:'2-digit' }).format(now);
    const en = new Intl.DateTimeFormat('en-GB',{ timeZone:'Europe/Kyiv', year:'numeric', month:'2-digit', day:'2-digit', hour:'2-digit', minute:'2-digit' }).format(now);
    return { ru, en };
  }
}

function concisePriceAdvice(pct,isEn){
  if (!Number.isFinite(pct)) return isEn?'Wait for confirmations; don‚Äôt enter without a setup.':'–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑ —Å–µ—Ç–∞–ø–∞.';
  if (pct >= 3) return isEn?'Hold/partial TP; don‚Äôt chase or add leverage.':'–î–µ—Ä–∂–∞—Ç—å/—á–∞—Å—Ç–∏—á–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å; –Ω–µ –¥–æ–≥–æ–Ω—è—Ç—å –∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø–ª–µ—á–æ.';
  if (pct >= 1) return isEn?'Hold/soft DCA; avoid impulsive leveraged longs.':'–î–µ—Ä–∂–∞—Ç—å/–º—è–≥–∫–∏–π DCA; –∏–∑–±–µ–≥–∞—Ç—å –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –ª–æ–Ω–≥–æ–≤ —Å –ø–ª–µ—á–æ–º.';
  if (pct <= -3) return isEn?'Wait for reversal; don‚Äôt catch knives, reduce size.':'–ñ–¥–∞—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞; –Ω–µ –ª–æ–≤–∏—Ç—å –Ω–æ–∂–∏, —Ä–∞–∑–º–µ—Ä —Å–Ω–∏–∂–∞—Ç—å.';
  if (pct <= -1) return isEn?'Wait for confirmations; do not raise risk.':'–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.';
  return isEn?'Neutral; entries only on signals.':'–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ; –≤—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ —Å–∏–≥–Ω–∞–ª—É.';
}
function conciseRsiAdvice(v,isEn){
  if (!Number.isFinite(v)) return isEn?'No RSI ‚Äî rely on price/volume.':'–ë–µ–∑ RSI ‚Äî –æ–ø–æ—Ä–∞ –Ω–∞ —Ü–µ–Ω—É/–æ–±—ä—ë–º.';
  if (v >= 70) return isEn?'Overbought risk ‚Äî tighten risk, watch for divergences.':'–†–∏—Å–∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî —É–∂–∞—Ç—å —Ä–∏—Å–∫, –∏—Å–∫–∞—Ç—å –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏.';
  if (v <= 30) return isEn?'Oversold ‚Äî wait for reversal; avoid naked shorts.':'–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –∂–¥–∞—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞, –Ω–µ —à–æ—Ä—Ç–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.';
  return isEn?'Momentum neutral ‚Äî trade trend with stops.':'–ò–º–ø—É–ª—å—Å –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É –∏ —Å—Ç–æ–ø–∞–º.';
}
function conciseFlowsAdvice(usd,isEn){
  if (!Number.isFinite(usd)) return isEn?'Don‚Äôt rely on flows alone; decide by confluence.':'–ù–µ –ø–æ–ª–∞–≥–∞–π—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ; —Ä–µ—à–µ–Ω–∏—è –ø–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.';
  if (usd > 0) return isEn?'Inflow ‚Äî potential sell pressure; avoid all-in on pumps.':'–ü—Ä–∏—Ç–æ–∫ ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏; –Ω–µ –≤—Ö–æ–¥–∏—Ç—å all-in –Ω–∞ —Ä–æ—Å—Ç–µ.';
  if (usd < 0) return isEn?'Outflow ‚Äî supportive; longs only on confirmation.':'–û—Ç—Ç–æ–∫ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞; –ª–æ–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.';
  return isEn?'Flat ‚Äî stick to plan.':'–†–æ–≤–Ω–æ ‚Äî –¥–µ—Ä–∂–∞—Ç—å –ø–ª–∞–Ω.';
}
function conciseFundingAdvice(f,isEn){
  if (!Number.isFinite(f)) return isEn?'Evaluate without funding; don‚Äôt overrate it.':'–û—Ü–µ–Ω–∏–≤–∞–π –±–µ–∑ funding; –Ω–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É.';
  if (Math.abs(f) > 0.0003) return isEn?'Elevated funding ‚Äî cut leverage, be ready for squeezes.':'–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π funding ‚Äî —Ä–µ–∑–∞—Ç—å –ø–ª–µ—á–æ, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–∫–≤–∏–∑–∞–º.';
  return isEn?'Moderate funding ‚Äî don‚Äôt add leverage without confirmation.':'–£–º–µ—Ä–µ–Ω–Ω—ã–π funding ‚Äî –ø–ª–µ—á–æ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.';
}
function conciseLsAdvice(longPct,isEn){
  if (!Number.isFinite(longPct)) return isEn?'Watch price/volume; L/S low value now.':'–°–º–æ—Ç—Ä–∏ —Ü–µ–Ω—É/–æ–±—ä—ë–º; L/S –º–∞–ª–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å.';
  if (longPct > 65) return isEn?'Longs crowded ‚Äî long-squeeze risk; don‚Äôt add leverage.':'–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã –ª–æ–Ω–≥–∏ ‚Äî —Ä–∏—Å–∫ –ª–æ–Ω–≥-—Å–∫–≤–∏–∑–∞; –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–ª–µ—á–æ.';
  if (longPct < 45) return isEn?'Shorts crowded ‚Äî short-squeeze risk; careful with shorts.':'–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã —à–æ—Ä—Ç—ã ‚Äî —Ä–∏—Å–∫ —à–æ—Ä—Ç-—Å–∫–≤–∏–∑–∞; –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —à–æ—Ä—Ç–∞–º–∏.';
  return isEn?'Balanced positioning ‚Äî no extremes.':'–ë–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ü–∏–π ‚Äî –±–µ–∑ –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π.';
}
function conciseRiskAdvice(score,isEn){
  const pct = Math.round((Number(score)||0)*100);
  if (pct >= 60) return isEn?'Reduce exposure, partial TP; avoid new aggressive longs.':'–°–Ω–∏–∂–∞—Ç—å —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é, —á–∞—Å—Ç–∏—á–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å; –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ª–æ–Ω–≥–∏.';
  if (pct >= 30) return isEn?'Cut leverage, trail stops; don‚Äôt ramp positions.':'–†–µ–∑–∞—Ç—å –ø–ª–µ—á–æ, —Ç—è–Ω—É—Ç—å —Å—Ç–æ–ø—ã; –Ω–µ —Ä–∞–∑–≥–æ–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é.';
  if (pct >= 10) return isEn?'Entries only on confirmation; don‚Äôt add leverage.':'–í—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é; –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–ª–µ—á–æ.';
  return isEn?'Hold / gentle DCA; do not raise risk.':'–î–µ—Ä–∂–∞—Ç—å/–∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É—Å—Ä–µ–¥–Ω—è—Ç—å; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.';
}

function flowsHeaderLine(sym, isEn){
  const now = Number(sym?.netFlowsUSDNow);
  const prev = Number(sym?.netFlowsUSDPrev);
  const diff = Number(sym?.netFlowsUSDDiff);
  if (!Number.isFinite(now) && !Number.isFinite(prev)) return '‚Äî';
  const abbr = Number.isFinite(now) ? `${now>=0?'+':'‚àí'}${abbrevWithUnit(Math.abs(now), isEn)}` : '';
  let deltaPart = '';
  if (Number.isFinite(prev) && Math.abs(prev) > 0 && Number.isFinite(diff)) {
    const diffPct = (diff/Math.abs(prev))*100;
    if (Number.isFinite(diffPct)) {
      const circ = circleByDelta(diffPct);
      deltaPart = ` ${circ}(${B(`${diffPct>0?'+':''}${diffPct.toFixed(2)}%`)} ${isEn?'vs prev 24h':'–∫ –ø—Ä–µ–¥. 24—á'})`;
    }
  }
  return `${B(abbr || '‚Äî')}${deltaPart}`;
}

function pickSubsetBySymbols(snapshots, symbols){
  const out={};
  for(const s of symbols){ if (snapshots?.[s]) out[s]=snapshots[s]; }
  return out;
}

async function findClosestWith(db, collection, target, hasValue, windowMs=48*3600*1000){
  const minTs = target - windowMs;
  const maxTs = target + windowMs;
  const q = { at: { $gte: minTs, $lte: maxTs } };
  const proj = { at:1, snapshots:1, btcDominancePct:1, spx:1, totals:1 };
  const cur = db.collection(collection).find(q, { projection: proj }).sort({ at: 1 }).limit(1000);
  let best=null, bestDist=Infinity;
  while (await cur.hasNext()) {
    const d = await cur.next();
    if (hasValue(d)) {
      const dist = Math.abs(Number(d.at) - target);
      if (dist < bestDist) { best = d; bestDist = dist; }
    }
  }
  if (best) return best;
  const cur2 = db.collection(collection).find({}, { projection: proj }).sort({ at: -1 }).limit(500);
  best=null; bestDist=Infinity;
  while (await cur2.hasNext()) {
    const d = await cur2.next();
    if (hasValue(d)) {
      const dist = Math.abs(Number(d.at) - target);
      if (dist < bestDist) { best = d; bestDist = dist; }
    }
  }
  return best;
}

async function findLatestDocWith(db, collection, hasValue){
  const cur = db.collection(collection).find({}, { projection: { at:1, snapshots:1, btcDominancePct:1, spx:1, totals:1 } }).sort({ at: -1 }).limit(500);
  while (await cur.hasNext()) { const d = await cur.next(); if (hasValue(d)) return d; }
  return null;
}

export async function getMarketSnapshot(symbols=['BTC','ETH','PAXG']){
  const dbName = process.env.DB_NAME || 'crypto_alert_dev';
  const collection = process.env.COLLLECTION || process.env.COLLECTION || 'marketSnapshots';
  const db = client.db(dbName);

  const freshest = await db.collection(collection).find({}, { projection: { snapshots:1, at:1, atIsoKyiv:1, btcDominancePct:1, spx:1, totals:1 } }).sort({ at: -1 }).limit(1).next();
  if (!freshest || !freshest.snapshots) return { ok:false, reason:'no_snapshot' };

  const subset = pickSubsetBySymbols(freshest.snapshots, symbols);

  const domNowDoc = isNum(freshest.btcDominancePct) ? freshest : (await findLatestDocWith(db, collection, d => isNum(d?.btcDominancePct)));
  const domNowVal = isNum(domNowDoc?.btcDominancePct) ? Number(domNowDoc.btcDominancePct) : null;
  let domDeltaVal = null;
  if (isNum(domNowDoc?.at) && isNum(domNowVal)) {
    const target = Number(domNowDoc.at) - 24*3600*1000;
    const ref = await findClosestWith(db, collection, target, d => isNum(d?.btcDominancePct));
    const refVal = isNum(ref?.btcDominancePct) ? Number(ref.btcDominancePct) : null;
    if (isNum(refVal) && refVal !== 0) domDeltaVal = ((domNowVal - refVal) / refVal) * 100;
  }

  let spxNowDoc = isNum(freshest?.spx?.price) ? freshest : (await findLatestDocWith(db, collection, d => isNum(d?.spx?.price)));
  const spxNowPrice = isNum(spxNowDoc?.spx?.price) ? Number(spxNowDoc.spx.price) : null;
  let spxNowPct = isNum(spxNowDoc?.spx?.pct) ? Number(spxNowDoc.spx.pct) : null;
  if (isNum(spxNowDoc?.at) && isNum(spxNowPrice)) {
    const target = Number(spxNowDoc.at) - 24*3600*1000;
    const ref = await findClosestWith(db, collection, target, d => isNum(d?.spx?.price));
    const refPrice = isNum(ref?.spx?.price) ? Number(ref.spx.price) : null;
    if (isNum(refPrice) && refPrice !== 0) spxNowPct = ((spxNowPrice - refPrice)/refPrice)*100;
  }
  const spx = { price: isNum(spxNowPrice) ? spxNowPrice : null, pct: isNum(spxNowPct) ? spxNowPct : null, src: spxNowDoc?.spx?.src || null };

  const totals = freshest?.totals ?? null;

  const fgiNow = isNum(freshest?.snapshots?.BTC?.fgiValue) ? Number(freshest.snapshots.BTC.fgiValue) : null;
  let fgiDelta = null;
  if (isNum(freshest?.at) && isNum(fgiNow)) {
    const target = Number(freshest.at) - 24*3600*1000;
    const ref = await findClosestWith(db, collection, target, d => isNum(d?.snapshots?.BTC?.fgiValue));
    const refVal = isNum(ref?.snapshots?.BTC?.fgiValue) ? Number(ref.snapshots.BTC.fgiValue) : null;
    if (isNum(refVal)) fgiDelta = fgiNow - refVal;
  }

  return {
    ok:true,
    snapshots: subset,
    fetchedAt: freshest.at,
    atIsoKyiv: freshest.atIsoKyiv || '',
    btcDominancePct: isNum(domNowVal) ? domNowVal : null,
    btcDominanceDelta: isNum(domDeltaVal) ? domDeltaVal : null,
    spx,
    totals,
    fgiNow: isNum(fgiNow) ? fgiNow : null,
    fgiDelta: isNum(fgiDelta) ? fgiDelta : null
  };
}

function buildMorningReportParts(snapshots, lang='ru', tsIsoKyiv='', tsEpoch=null, extras={}){
  const isEn=String(lang).toLowerCase().startsWith('en');
  const T=isEn?{
    report:'REPORT',
    asof:'As of',
    price:'Price *¬π',
    fgi:'Fear & Greed *¬≤',
    dom:'BTC Dominance *¬≥',
    spx:'S&P 500 *‚Å¥',
    totals:'Market cap *‚Åµ',
    volumes:'24h Volume *‚Å∂',
    rsi:'RSI (14) *‚Å∑',
    flows:'Net flows *‚Å∏',
    funding:'Funding rate (avg) *‚Åπ',
    ls:'Longs vs Shorts *¬π‚Å∞',
    risks:'Risk *¬π¬π',
    over24h:'over 24h',
    updatesNote:'updates every 30 min'
  }:{
    report:'–û–¢–ß–ï–¢',
    asof:'–î–∞–Ω–Ω—ã–µ –Ω–∞',
    price:'–¶–µ–Ω–∞ *¬π',
    fgi:'–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ *¬≤',
    dom:'–î–æ–º–∏–Ω–∞—Ü–∏—è BTC *¬≥',
    spx:'S&P 500 *‚Å¥',
    totals:'–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è *‚Åµ',
    volumes:'–û–±—ä–µ–º 24 —á *‚Å∂',
    rsi:'RSI (14) *‚Å∑',
    flows:'–ü—Ä–∏—Ç–æ–∫–∏/–æ—Ç—Ç–æ–∫–∏ *‚Å∏',
    funding:'–§–∞–Ω–¥–∏–Ω–≥ (—Å—Ä.) *‚Åπ',
    ls:'–õ–æ–Ω–≥–∏ vs –®–æ—Ä—Ç—ã *¬π‚Å∞',
    risks:'–†–∏—Å–∫ *¬π¬π',
    over24h:'–∑–∞ 24 —á–∞—Å–∞',
    updatesNote:'–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω'
  };

  const when = formatKyiv(tsEpoch, tsIsoKyiv);
  const asOf = isEn ? when.en : when.ru;
  const tzSuffix = ' (Europe/Kyiv)';

  const priceLine = (sym, label) => {
    const pct = Number(sym?.pct24);
    const circ = circleByDelta(pct);
    const pctTxt = Number.isFinite(pct) ? `${circ} (${B(`${pct>0?'+':''}${pct.toFixed(2)}%`)} ${T.over24h})` : '(‚Äî)';
    const p = Number.isFinite(sym?.price) ? `$${isEn?humanFmtEN(sym.price):humanFmt(sym.price)}` : '‚Äî';
    const lbl = label ? `${label} ` : '';
    return `${lbl}${B(p)} ${pctTxt}`;
  };
  const fgiLine = (sym) => {
    const v = Number(sym?.fgiValue);
    if (!Number.isFinite(v)) return '‚Äî';
    const cls = fgiClassFromValue(v, isEn);
    const bar = fearGreedBarColorized(v);
    return `${B(String(v))}${cls ? ` (${B(cls)})` : ''}\n${bar}`;
  };
  const volumeLine = (sym) => {
    const vol = Number(sym?.vol24);
    const deltaPct = Number(sym?.volDeltaPct);
    const circ = circleByDelta(deltaPct);
    const abbrVal = Number.isFinite(vol) ? abbrevWithUnit(vol, isEn) : '';
    const abbr = abbrVal ? B(abbrVal) : '‚Äî';
    const pctTxt = Number.isFinite(deltaPct) ? `${circ}(${B(`${deltaPct>0?'+':''}${deltaPct.toFixed(2)}%`)} ${T.over24h})` : '';
    return [abbr, pctTxt].filter(Boolean).join(' ');
  };
  const rsiLine = (sym) => {
    const now = Number(sym?.rsi14), prev = Number(sym?.rsi14Prev);
    if(!Number.isFinite(now)) return '‚Äî';
    const base = B(isEn?humanFmtEN(now):humanFmt(now));
    if(Number.isFinite(prev)){
      const d = now - prev;
      const circ = circleByDelta(d);
      const dTxt = `${circ}(${B(`${d>0?'+':''}${d.toFixed(2)}`)} ${T.over24h})`;
      return `${base} ${dTxt}`;
    }
    return base;
  };
  const fundingLine = (sym) => {
    const now = Number(sym?.fundingNow);
    const prev = Number(sym?.fundingPrev);
    if(!Number.isFinite(now) || nearZero(now)) return '‚Äî';
    const base = B(fmtFunding(now));
    if(Number.isFinite(prev) && !nearZero(prev)){
      const d = now - prev;
      const circ = circleByDelta(d);
      const bps = d * 10000;
      const dTxt = `${circ}(${B(`${(bps>0?'+':'')}${(bps).toFixed(2)} ${isEn?'bps':'–±.–ø.'}`)})`;
      return `${base} ${dTxt}`;
    }
    return base;
  };

  const head=[];
  head.push(`üìä ${BU(T.report)}`);
  head.push('');

  head.push(BU(T.price));
  if (snapshots.BTC) head.push(`BTC ${priceLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) head.push(`ETH ${priceLine((snapshots.ETH)||{})}`);
  if (snapshots.PAXG) head.push(`PAXG ${priceLine((snapshots.PAXG)||{}, '')}`);
  head.push('');

  head.push(BU(T.dom));
  const domPct = typeof extras?.btcDominancePct === 'number' ? extras.btcDominancePct : null;
  const domDelta = typeof extras?.btcDominanceDelta === 'number' ? extras.btcDominanceDelta : null;
  const domParts = [];
  if (Number.isFinite(domPct)) domParts.push(B(`${domPct.toFixed(2)}%`));
  if (Number.isFinite(domDelta)) {
    const circ = circleByDelta(domDelta);
    domParts.push(`${circ} (${B(`${domDelta>0?'+':''}${domDelta.toFixed(2)}%`)} ${T.over24h})`);
  }
  head.push(`‚Ä¢ ${domParts.length ? domParts.join(' ') : '‚Äî'}`);
  head.push('');

  head.push(BU(T.fgi));
  head.push(`‚Ä¢ ${fgiLine((snapshots.BTC)||{})}`);
  head.push('');

  head.push(BU(T.ls));
  if (snapshots.BTC) head.push(renderLsBlock(((snapshots.BTC)||{}).longShort, isEn, 'BTC'));
  if (snapshots.ETH) head.push(renderLsBlock(((snapshots.ETH)||{}).longShort, isEn, 'ETH'));
  head.push('');

  head.push(BU(T.spx));
  const spxPrice = (extras?.spx && typeof extras.spx.price === 'number') ? extras.spx.price : null;
  const spxPct = (extras?.spx && typeof extras.spx.pct === 'number') ? extras.spx.pct : null;
  const spxParts = [];
  if (Number.isFinite(spxPrice)) spxParts.push(B(isEn?humanFmtEN(spxPrice):humanFmt(spxPrice)));
  if (Number.isFinite(spxPct)) {
    const spxCirc = circleByDelta(spxPct);
    spxParts.push(`${spxCirc} (${B(`${spxPct>0?'+':''}${spxPct.toFixed(2)}%`)} ${T.over24h})`);
  }
  head.push(`‚Ä¢ ${spxParts.length ? spxParts.join(' ') : '‚Äî'}`);
  head.push('');

  head.push(BU(T.totals));
  const tot = extras?.totals || null;
  if (tot && Number.isFinite(tot.total)) {
    const t1 = `${B((isEn?abbrevWithUnit(tot.total,true):abbrevWithUnit(tot.total,false)) || '‚Äî')}${Number.isFinite(tot.d1) ? ` ${circleByDelta(tot.d1)}(${B(`${tot.d1>0?'+':''}${tot.d1.toFixed(2)}%`)} ${T.over24h})` : ''}`;
    const t2 = `${B((isEn?abbrevWithUnit(tot.total2,true):abbrevWithUnit(tot.total2,false)) || '‚Äî')}${Number.isFinite(tot.d2) ? ` ${circleByDelta(tot.d2)}(${B(`${tot.d2>0?'+':''}${tot.d2.toFixed(2)}%`)} ${T.over24h})` : ''}`;
    const t3 = `${B((isEn?abbrevWithUnit(tot.total3,true):abbrevWithUnit(tot.total3,false)) || '‚Äî')}${Number.isFinite(tot.d3) ? ` ${circleByDelta(tot.d3)}(${B(`${tot.d3>0?'+':''}${tot.d3.toFixed(2)}%`)} ${T.over24h})` : ''}`;
    head.push(`‚Ä¢ TOTAL: ${t1}`);
    head.push(`‚Ä¢ TOTAL2: ${t2}`);
    head.push(`‚Ä¢ TOTAL3: ${t3}`);
  } else {
    head.push('‚Ä¢ ‚Äî');
  }
  head.push('');

  head.push(BU(T.volumes));
  if (snapshots.BTC) head.push(`‚Ä¢ BTC: ${volumeLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) head.push(`‚Ä¢ ETH: ${volumeLine((snapshots.ETH)||{})}`);
  head.push('');

  head.push(BU(T.rsi));
  if (snapshots.BTC) head.push(`‚Ä¢ BTC: ${rsiLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) head.push(`‚Ä¢ ETH: ${rsiLine((snapshots.ETH)||{})}`);
  head.push('');

  head.push(BU(T.flows));
  if (snapshots.BTC) head.push(`‚Ä¢ BTC: ${flowsHeaderLine((snapshots.BTC)||{}, isEn)}`);
  if (snapshots.ETH) head.push(`‚Ä¢ ETH: ${flowsHeaderLine((snapshots.ETH)||{}, isEn)}`);
  head.push('');

  head.push(BU(T.funding));
  if (snapshots.BTC) head.push(`‚Ä¢ BTC: ${fundingLine((snapshots.BTC)||{})}`);
  if (snapshots.ETH) head.push(`‚Ä¢ ETH: ${fundingLine((snapshots.ETH)||{})}`);
  head.push('');

  head.push(BU(T.risks));
  const scoreBTC = aggregateScore({
    priceRisk: priceChangeRisk((snapshots.BTC||{}).pct24),
    fundingRisk: fundingRiskFromNow((snapshots.BTC||{}).fundingNow),
    sentimentRisk: sentimentRiskFromLS((snapshots.BTC||{}).longShort?.longPct)
  });
  const scoreETH = aggregateScore({
    priceRisk: priceChangeRisk((snapshots.ETH||{}).pct24),
    fundingRisk: fundingRiskFromNow((snapshots.ETH||{}).fundingNow),
    sentimentRisk: sentimentRiskFromLS((snapshots.ETH||{}).longShort?.longPct)
  });
  const rBbar = `${riskBar(scoreBTC)} ${B(`${Math.round(scoreBTC*100)}%`)}`;
  const rEbar = `${riskBar(scoreETH)} ${B(`${Math.round(scoreETH*100)}%`)}`;
  if (snapshots.BTC) head.push(`‚Ä¢ BTC:\n${rBbar}`);
  if (snapshots.ETH) head.push(`‚Ä¢ ETH:\n${rEbar}`);
  head.push('');

  const help=[];
  help.push(BU(isEn?'Guide':'–°–ø—Ä–∞–≤–∫–∞'));
  help.push('');

  help.push(`${B(isEn?'¬π Price: spot.':'¬π –¶–µ–Ω–∞: —Å–ø–æ—Ç.')} ${isEn?'‚Äî snapshot of current price and 24h change. PAXG = tokenized gold (‚âà 1 troy oz per token).':'‚Äî –∫—Ä–∞—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á. PAXG ‚Äî —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ (‚âà 1 —É–Ω—Ü–∏—è –∑–æ–ª–æ—Ç–∞ –Ω–∞ 1 —Ç–æ–∫–µ–Ω).'}${snapshots.PAXG?'':''}`);
  if (snapshots.BTC) help.push(`‚Ä¢ ${B('BTC:')} ${isEn?'Wait for confirmations; do not raise risk.':'–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.'}`);
  if (snapshots.ETH) help.push(`‚Ä¢ ${B('ETH:')} ${isEn?'Wait for confirmations; do not raise risk.':'–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.'}`);
  if (snapshots.PAXG) help.push(`‚Ä¢ ${B('PAXG:')} ${isEn?'Wait for confirmations; do not raise risk.':'–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π; —Ä–∏—Å–∫ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å.'}`);

  const fgiVal = Number((snapshots.BTC||{}).fgiValue);
  let fgiAdvice = isEn?'Neutral ‚Äî stick to plan; don‚Äôt chase.':'–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ ‚Äî –¥–µ—Ä–∂–∞—Ç—å –ø–ª–∞–Ω; –Ω–µ –±–µ–≥–∞—Ç—å –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º.';
  if (Number.isFinite(fgiVal)) {
    if (fgiVal <= 24) fgiAdvice = isEn?'Extreme fear ‚Äî reduce size; A+ setups only.':'–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö ‚Äî —Ä–∞–∑–º–µ—Ä —Å–Ω–∏–∂–∞—Ç—å, –≤—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ A+ —Å–µ—Ç–∞–ø–∞–º.';
    else if (fgiVal <= 44) fgiAdvice = isEn?'Fear ‚Äî entries only on confirmations; no averaging without stop.':'–°—Ç—Ä–∞—Ö ‚Äî –≤—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º; –Ω–µ —É—Å—Ä–µ–¥–Ω—è—Ç—å –±–µ–∑ —Å—Ç–æ–ø–∞.';
    else if (fgiVal >= 75) fgiAdvice = isEn?'Extreme greed ‚Äî cut leverage; take profits per plan.':'–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å ‚Äî —Å–Ω–∏–∂–∞—Ç—å –ø–ª–µ—á–æ; —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.';
    else if (fgiVal >= 55) fgiAdvice = isEn?'Greed ‚Äî trim leverage; partial TP by rules.':'–ñ–∞–¥–Ω–æ—Å—Ç—å ‚Äî —Ä–µ–∑–∞—Ç—å –ø–ª–µ—á–æ, —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ –ø–ª–∞–Ω—É.';
    else fgiAdvice = isEn?'Neutral ‚Äî stick to plan; don‚Äôt chase.':'–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ ‚Äî –¥–µ—Ä–∂–∞—Ç—å –ø–ª–∞–Ω; –Ω–µ –±–µ–≥–∞—Ç—å –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º.';
  }

  help.push('');
  help.push(`${B(isEn?'¬≤ Fear & Greed':'¬≤ –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏')} ${isEn?'‚Äî composite BTC sentiment.':'‚Äî —Å–≤–æ–¥–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ BTC.'}`);
  help.push(`‚Ä¢ ${B(isEn?'BTC/Market:':'BTC/Market:')} ${fgiAdvice}`);

  help.push('');
  help.push(`${B(isEn?'¬≥ BTC Dominance':'¬≥ –î–æ–º–∏–Ω–∞—Ü–∏—è BTC')} ${isEn?'‚Äî BTC share of total crypto market cap. Rising = capital rotates to BTC; falling = interest in alts.':'‚Äî –¥–æ–ª—è BTC –≤ –æ–±—â–µ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞. –†–æ—Å—Ç ‚Äî –∫–∞–ø–∏—Ç–∞–ª —É—Ö–æ–¥–∏—Ç –≤ BTC; –ø–∞–¥–µ–Ω–∏–µ ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∞–ª—å—Ç–∞–º.'}`);

  help.push('');
  help.push(`${B('‚Å¥ S&P 500')} ${isEn?'‚Äî broad risk barometer; weakness pressures crypto, strength supports risk.':'‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä —Ä–∏—Å–∫–∞; —Å–ª–∞–±–æ—Å—Ç—å –¥–∞–≤–∏—Ç –Ω–∞ –∫—Ä–∏–ø—Ç—É, —Ä–æ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∏—Å–∫.'}`);

  help.push('');
  help.push(`${B(isEn?'‚Åµ Market cap':'‚Åµ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è')} ${isEn?'‚Äî breadth of the crypto market.':'‚Äî —à–∏—Ä–∏–Ω–∞/–º–∞—Å—à—Ç–∞–± –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞.'}`);
  help.push(`‚Ä¢ ${B('TOTAL')}: ${isEn?'Total crypto market cap.':'–í—Å—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞.'} ${isEn?'When falling ‚Äî reduce risk; when rising with volume ‚Äî follow trend, partial TP by plan.':'–ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ ‚Äî —Å–Ω–∏–∂–∞—Ç—å —Ä–∏—Å–∫; –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞ –æ–±—ä—ë–º–µ ‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É, —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ –ø–ª–∞–Ω—É.'}`);
  help.push(`‚Ä¢ ${B(isEn?'TOTAL2 (ex-BTC)':'TOTAL2 (–±–µ–∑ BTC)')}: ${isEn?'Market cap without BTC ‚Äî proxy for altcoin breadth.':'–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ BTC ‚Äî –ø—Ä–æ–∫—Å–∏ —à–∏—Ä–æ—Ç—ã ¬´–∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞¬ª.'} ${isEn?'Rising TOTAL2 > TOTAL suggests alt rotation; fading warns to avoid weak alts.':'–†–æ—Å—Ç TOTAL2 –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ TOTAL ‚Äî —Ä–æ—Ç–∞—Ü–∏—è –≤ –∞–ª—å—Ç—ã; —É–≥–∞—Å–∞–Ω–∏–µ ‚Äî –Ω–µ –∑–∞–ª–µ—Ç–∞—Ç—å –≤ —Å–ª–∞–±—ã–µ –∞–ª—å—Ç—ã.'}`);
  help.push(`‚Ä¢ ${B(isEn?'TOTAL3 (ex-BTC & ETH)':'TOTAL3 (–±–µ–∑ BTC –∏ ETH)')}: ${isEn?'Altcoins without BTC & ETH ‚Äî high beta segment.':'–ê–ª—å—Ç—ã –±–µ–∑ BTC –∏ ETH ‚Äî –≤—ã—Å–æ–∫–æ–±–µ—Ç–∞-—Å–µ–≥–º–µ–Ω—Ç.'} ${isEn?'Use for risk-on/off in small/mid-caps; manage size strictly.':'–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ risk-on/off –≤ small/mid-cap; —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π —Ä–∞–∑–º–µ—Ä.'}`);

  help.push('');
  help.push(`${B(isEn?'‚Å∂ 24h Volume':'‚Å∂ –û–±—ä–µ–º 24 —á')} ${isEn?'‚Äî confirms/weakens price moves.':'‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç/–æ—Å–ª–∞–±–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã.'}`);

  help.push('');
  help.push(`${B('‚Å∑ RSI(14)')} ${isEn?'‚Äî momentum: ~70 overbought, ~30 oversold.':'‚Äî –∏–º–ø—É–ª—å—Å: ‚âà70 –ø–µ—Ä–µ–≥—Ä–µ–≤, ‚âà30 –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å.'}`);
  if (snapshots.BTC) help.push(`‚Ä¢ ${B('BTC:')} ${conciseRsiAdvice((snapshots.BTC||{}).rsi14,isEn)}`);
  if (snapshots.ETH) help.push(`‚Ä¢ ${B('ETH:')} ${conciseRsiAdvice((snapshots.ETH||{}).rsi14,isEn)}`);

  help.push('');
  help.push(`${B(isEn?'‚Å∏ Net flows':'‚Å∏ Net flows')} ${isEn?'‚Äî exchange inflows/outflows (inflow = sell pressure, outflow = support).':'‚Äî —á–∏—Å—Ç—ã–µ –ø—Ä–∏—Ç–æ–∫–∏/–æ—Ç—Ç–æ–∫–∏ –Ω–∞ –±–∏—Ä–∂–∏ (–ø—Ä–∏—Ç–æ–∫ = –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏, –æ—Ç—Ç–æ–∫ = –ø–æ–¥–¥–µ—Ä–∂–∫–∞).'}`);
  if (snapshots.BTC) help.push(`‚Ä¢ ${B('BTC:')} ${conciseFlowsAdvice((snapshots.BTC||{}).netFlowsUSDNow,isEn)}`);
  if (snapshots.ETH) help.push(`‚Ä¢ ${B('ETH:')} ${conciseFlowsAdvice((snapshots.ETH||{}).netFlowsUSDNow,isEn)}`);

  help.push('');
  help.push(`${B(isEn?'‚Åπ Funding':'‚Åπ Funding')} ${isEn?'‚Äî perp rate between longs & shorts.':'‚Äî —Å—Ç–∞–≤–∫–∞ –º–µ–∂–¥—É –ª–æ–Ω–≥–∞–º–∏ –∏ —à–æ—Ä—Ç–∞–º–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö.'}`);
  if (snapshots.BTC) help.push(`‚Ä¢ ${B('BTC:')} ${conciseFundingAdvice((snapshots.BTC||{}).fundingNow,isEn)}`);
  if (snapshots.ETH) help.push(`‚Ä¢ ${B('ETH:')} ${conciseFundingAdvice((snapshots.ETH||{}).fundingNow,isEn)}`);

  help.push('');
  help.push(`${B(isEn?'¬π‚Å∞ Longs/Shorts (L/S)':'¬π‚Å∞ –õ–æ–Ω–≥–∏/–®–æ—Ä—Ç—ã (L/S)')} ${isEn?'‚Äî imbalance raises squeeze risk.':'‚Äî –ø–µ—Ä–µ–∫–æ—Å –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ —Å–∫–≤–∏–∑–∞.'}`);
  if (snapshots.BTC) help.push(`‚Ä¢ ${B('BTC:')} ${conciseLsAdvice((snapshots.BTC||{}).longShort?.longPct,isEn)}`);
  if (snapshots.ETH) help.push(`‚Ä¢ ${B('ETH:')} ${conciseLsAdvice((snapshots.ETH||{}).longShort?.longPct,isEn)}`);

  help.push('');
  help.push(`${B(isEn?'¬π¬π Risk':'¬π¬π –†–∏—Å–∫')} ${isEn?'‚Äî aggregate of price, funding, and L/S (0% low, 100% high).':'‚Äî –∞–≥—Ä–µ–≥–∞—Ç —Ü–µ–Ω—ã, funding –∏ L/S (0% –Ω–∏–∑–∫–∏–π, 100% –≤—ã—Å–æ–∫–∏–π).'}`);
  if (snapshots.BTC) help.push(`‚Ä¢ ${B('BTC:')} ${conciseRiskAdvice(scoreBTC,isEn)}`);
  if (snapshots.ETH) help.push(`‚Ä¢ ${B('ETH:')} ${conciseRiskAdvice(scoreETH,isEn)}`);

  if (asOf) {
    help.push('');
    help.push(`${T.asof}: ${B(`${asOf}${tzSuffix}`)} - ${T.updatesNote}`);
  }

  const headHtml = head.join('\n');
  const helpHtml = help.join('\n');
  const fullHtml = headHtml + '\n' + helpHtml;
  return { headHtml, helpHtml, fullHtml };
}

function buildShortReportParts(snapshots, lang='ru', extras={}){
  const isEn = String(lang).toLowerCase().startsWith('en');
  const T = isEn ? {
    short:'SHORT REPORT',
    market:'Market',
    btc:'BTC',
    eth:'ETH',
    gold:'Gold',
    total:'Total',
    rsi:'RSI (BTC)',
    dom:'BTC.D',
    ratio:'BTC/ETH'
  } : {
    short:'–ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢',
    market:'–†—ã–Ω–æ–∫',
    btc:'BTC',
    eth:'ETH',
    gold:'–ó–æ–ª–æ—Ç–æ',
    total:'Total',
    rsi:'RSI (BTC)',
    dom:'BTC.D',
    ratio:'BTC/ETH'
  };

  const btc = snapshots.BTC || {};
  const eth = snapshots.ETH || {};
  const paxg = snapshots.PAXG || {};

  const ratioNow = (Number.isFinite(btc.price) && Number.isFinite(eth.price) && eth.price!==0) ? (btc.price/eth.price) : null;
  const ratioDelta = (Number.isFinite(btc.pct24) && Number.isFinite(eth.pct24)) ? (((1+btc.pct24/100)/(1+eth.pct24/100))-1)*100 : null;

  const domPct = Number.isFinite(extras?.btcDominancePct) ? Number(extras.btcDominancePct) : null;
  const domDelta = Number.isFinite(extras?.btcDominanceDelta) ? Number(extras.btcDominanceDelta) : null;

  const fgiNow = Number.isFinite(extras?.fgiNow) ? Number(extras.fgiNow) : (Number.isFinite(btc.fgiValue) ? Number(btc.fgiValue) : null);
  const fgiDeltaAbs = Number.isFinite(extras?.fgiDelta) ? Number(extras.fgiDelta) : null;
  const fgiPrev = (Number.isFinite(fgiNow) && Number.isFinite(fgiDeltaAbs)) ? (fgiNow - fgiDeltaAbs) : null;
  const fgiDeltaPct = (Number.isFinite(fgiDeltaAbs) && Number.isFinite(fgiPrev) && fgiPrev !== 0)
    ? (fgiDeltaAbs / Math.abs(fgiPrev)) * 100
    : null;

  const goldPct = Number.isFinite(paxg.pct24) ? Number(paxg.pct24) : null;
  const goldPrice = Number.isFinite(paxg.price) ? (isEn?`$${humanFmtEN(paxg.price)}`:`$${humanFmt(paxg.price)}`) : null;

  const rsiNow = Number.isFinite(btc.rsi14) ? Number(btc.rsi14) : null;
  const rsiPrev = Number.isFinite(btc.rsi14Prev) ? Number(btc.rsi14Prev) : null;
  const rsiDelta = (Number.isFinite(rsiNow) && Number.isFinite(rsiPrev)) ? (rsiNow - rsiPrev) : null;

  const mcap = extras?.totals || null;
  const mcapNow = Number.isFinite(mcap?.total) ? Number(mcap.total) : null;
  const mcapPct = Number.isFinite(mcap?.d1) ? Number(mcap.d1) : null;

  const arrow = (v) => Number.isFinite(v) ? (v>0 ? '‚Üó' : (v<0 ? '‚Üò' : '‚Üí')) : '‚Üí';
  const pctFmt = (v) => Number.isFinite(v) ? `${v>0?'+':''}${v.toFixed(2)}%` : '‚Äî';
  const priceFmt = (v) => Number.isFinite(v) ? (isEn?`$${humanFmtEN(v)}`:`$${humanFmt(v)}`) : '‚Äî';
  const capFmtTight = (v) => {
    if (!Number.isFinite(v)) return '‚Äî';
    return (isEn ? abbrevWithUnit(v, true) : abbrevWithUnit(v, false))
      .replace(/ (?=[A-Za-z–ê-–Ø–∞-—è–Å—ë.]+$)/, '');
  };
  const ratioFmt = (v) => Number.isFinite(v) ? v.toFixed(4) : '‚Äî';
  const circ = (v) => circleByDelta(Number(v));

  const lines = [];
  lines.push(`üìå ${BU(T.short)}`);

  const fgiLabelTxt = Number.isFinite(fgiNow)
    ? (isEn ? `${fgiNow} - ${fgiClassFromValue(fgiNow,true)}` : `${fgiNow} - ${fgiClassFromValue(fgiNow,false)}`)
    : '‚Äî';
  lines.push(`${circ(fgiDeltaPct)} ${T.market}: ${arrow(fgiDeltaPct)} ${pctFmt(fgiDeltaPct)} (${B(fgiLabelTxt)})`);

  lines.push(`${circ(btc.pct24)} ${T.btc}: ${arrow(btc.pct24)} ${pctFmt(btc.pct24)} (${B(priceFmt(btc.price))})`);
  lines.push(`${circ(eth.pct24)} ${T.eth}: ${arrow(eth.pct24)} ${pctFmt(eth.pct24)} (${B(priceFmt(eth.price))})`);
  lines.push(`${circ(goldPct)} ${T.gold}: ${arrow(goldPct)} ${pctFmt(goldPct)} (${B(goldPrice||'‚Äî')})`);

  lines.push(`${circ(mcapPct)} ${T.total}: ${arrow(mcapPct)} ${pctFmt(mcapPct)} (${B(capFmtTight(mcapNow))})`);

  const rsiDeltaTxt = Number.isFinite(rsiDelta) ? (rsiDelta>0?`+${rsiDelta.toFixed(2)}`:rsiDelta.toFixed(2)) : '‚Äî';
  const rsiValTxt = Number.isFinite(rsiNow) ? B(rsiNow.toFixed(2)) : '‚Äî';
  lines.push(`${circ(rsiDelta)} ${T.rsi}: ${arrow(rsiDelta)} ${rsiDeltaTxt} (${rsiValTxt})`);

  const domPctTxt = Number.isFinite(domPct) ? `${domPct.toFixed(2)}%` : '‚Äî';
  lines.push(`${circ(domDelta)} ${T.dom}: ${arrow(domDelta)} ${pctFmt(domDelta)} (${B(domPctTxt)})`);

  lines.push(`${circ(ratioDelta)} ${T.ratio}: ${arrow(ratioDelta)} ${pctFmt(ratioDelta)} (${B(ratioFmt(ratioNow))})`);

  return { shortHtml: lines.join('\n') };
}

export async function buildMorningReportHtml(snapshots, lang='ru', tsIsoKyiv='', tsEpoch=null, extras={}){
  const { fullHtml } = buildMorningReportParts(snapshots, lang, tsIsoKyiv, tsEpoch, extras);
  return fullHtml;
}

async function maybeNotifyAdmin(bot, text){
  try {
    if (!ADMIN_ID) return;
    await bot.telegram.sendMessage(ADMIN_ID, text);
  } catch {}
}

export async function startMarketMonitor(){ return { ok:true }; }

export async function broadcastMarketSnapshot(bot, { batchSize=MARKET_BATCH_SIZE || 25, pauseMs=MARKET_BATCH_PAUSE_MS || 400 } = {}){
  if (!usersCollection) return { ok:false, reason:'mongo_not_connected' };

  const recipients = await usersCollection.find(
    { botBlocked: { $ne: true }, sendMarketReport: { $ne: false } },
    { projection: { userId: 1, lang: 1 } }
  ).toArray();

  if (!recipients.length) return { ok:true, delivered:0, users:0, batchSize, pauseMs };

  const snap = await getMarketSnapshot(['BTC','ETH','PAXG']).catch(()=>null);
  if (!snap?.ok) return { ok:false, reason:'snapshot_failed', delivered:0, users:recipients.length };

  const { snapshots, atIsoKyiv, fetchedAt, btcDominancePct, btcDominanceDelta, spx, totals, fgiNow, fgiDelta } = snap;

  let delivered = 0;
  for (let i = 0; i < recipients.length; i += batchSize) {
    const chunk = recipients.slice(i, i + batchSize);
    await Promise.all(chunk.map(async (u) => {
      try {
        const lang = await resolveUserLang(u.userId).catch(() => u.lang || 'ru');
        const parts = buildMorningReportParts(snapshots, lang, atIsoKyiv, fetchedAt, { btcDominancePct, btcDominanceDelta, spx, totals, fgiNow, fgiDelta });
        const isEn = String(lang).toLowerCase().startsWith('en');
        const kb = { inline_keyboard: [[
            { text: isEn ? 'Short report' : '–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç', callback_data: 'market_short' },
            { text: isEn ? 'Guide' : '–°–ø—Ä–∞–≤–∫–∞', callback_data: 'market_help' }
          ]] };
        await bot.telegram.sendMessage(u.userId, parts.headHtml, { parse_mode:'HTML', reply_markup: kb });
        delivered++;
      } catch (err) {
        const code = err?.response?.error_code;
        const description = err?.response?.description || String(err?.message || err);
        if (code === 403 || /bot was blocked/i.test(description)) {
          try {
            await usersCollection.updateOne(
              { userId: u.userId },
              { $set: { botBlocked: true, botBlockedAt: new Date() } },
              { upsert: true }
            );
          } catch {}
        }
      }
    }));
    if (i + batchSize < recipients.length) {
      await new Promise(r => setTimeout(r, pauseMs));
    }
  }

  return { ok:true, delivered, users: recipients.length, batchSize, pauseMs };
}

export async function sendMarketReportToUser(bot, userId){
  const snap=await getMarketSnapshot(['BTC','ETH','PAXG']);
  if(!snap?.ok) return { ok:false };
  const lang=await resolveUserLang(userId).catch(()=> 'ru');
  const parts = buildMorningReportParts(
    snap.snapshots,
    lang,
    snap.atIsoKyiv || '',
    snap.fetchedAt ?? null,
    { btcDominancePct: snap.btcDominancePct, btcDominanceDelta: snap.btcDominanceDelta, spx: snap.spx, totals: snap.totals, fgiNow: snap.fgiNow, fgiDelta: snap.fgiDelta }
  );
  const isEn = String(lang).toLowerCase().startsWith('en');
  const kb = { inline_keyboard: [[
      { text: isEn ? 'Short report' : '–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç', callback_data: 'market_short' },
      { text: isEn ? 'Guide' : '–°–ø—Ä–∞–≤–∫–∞', callback_data: 'market_help' }
    ]] };
  await bot.telegram.sendMessage(userId, parts.headHtml, { parse_mode:'HTML', reply_markup: kb });
  return { ok:true };
}

export async function sendShortReportToUser(bot, userId){
  const snap=await getMarketSnapshot(['BTC','ETH','PAXG']);
  if(!snap?.ok) return { ok:false };
  const lang=await resolveUserLang(userId).catch(()=> 'ru');
  const { shortHtml } = buildShortReportParts(
    snap.snapshots,
    lang,
    { btcDominancePct: snap.btcDominancePct, btcDominanceDelta: snap.btcDominanceDelta, totals: snap.totals, fgiNow: snap.fgiNow, fgiDelta: snap.fgiDelta }
  );
  const isEn = String(lang).toLowerCase().startsWith('en');
  const kb = { inline_keyboard: [[
      { text: isEn ? 'Full report' : '–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç', callback_data: 'market_full' },
      { text: isEn ? 'Guide' : '–°–ø—Ä–∞–≤–∫–∞', callback_data: 'market_help' }
    ]] };
  await bot.telegram.sendMessage(userId, shortHtml, { parse_mode:'HTML', reply_markup: kb });
  return { ok:true };
}

export async function editReportMessageWithHelp(ctx){
  try {
    const userId = ctx.from?.id;
    const lang = await resolveUserLang(userId).catch(()=> 'ru');
    const isEn = String(lang).toLowerCase().startsWith('en');
    const okText = isEn ? 'Done.' : '–ì–æ—Ç–æ–≤–æ.';
    const errText = isEn ? 'Error' : '–û—à–∏–±–∫–∞';

    const snap=await getMarketSnapshot(['BTC','ETH','PAXG']);
    if(!snap?.ok) { await ctx.answerCbQuery(errText); return; }
    const parts = buildMorningReportParts(
      snap.snapshots,
      lang,
      snap.atIsoKyiv || '',
      snap.fetchedAt ?? null,
      { btcDominancePct: snap.btcDominancePct, btcDominanceDelta: snap.btcDominanceDelta, spx: snap.spx, totals: snap.totals, fgiNow: snap.fgiNow, fgiDelta: snap.fgiDelta }
    );
    await ctx.editMessageText(parts.fullHtml, { parse_mode:'HTML', reply_markup: { inline_keyboard: [[
          { text: isEn ? 'Short report' : '–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç', callback_data: 'market_short' }
        ]] } });
    await ctx.answerCbQuery(okText);
  } catch {
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
}

export async function editReportMessageToShort(ctx){
  try{
    const userId = ctx.from?.id;
    const lang = await resolveUserLang(userId).catch(()=> 'ru');
    const isEn = String(lang).toLowerCase().startsWith('en');
    const snap=await getMarketSnapshot(['BTC','ETH','PAXG']);
    if(!snap?.ok) { await ctx.answerCbQuery(isEn?'Error':'–û—à–∏–±–∫–∞'); return; }
    const { shortHtml } = buildShortReportParts(
      snap.snapshots,
      lang,
      { btcDominancePct: snap.btcDominancePct, btcDominanceDelta: snap.btcDominanceDelta, totals: snap.totals, fgiNow: snap.fgiNow, fgiDelta: snap.fgiDelta }
    );
    const kb = { inline_keyboard: [[
        { text: isEn ? 'Full report' : '–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç', callback_data: 'market_full' },
        { text: isEn ? 'Guide' : '–°–ø—Ä–∞–≤–∫–∞', callback_data: 'market_help' }
      ]] };
    await ctx.editMessageText(shortHtml, { parse_mode:'HTML', reply_markup: kb });
    await ctx.answerCbQuery(isEn?'Done.':'–ì–æ—Ç–æ–≤–æ.');
  } catch { try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {} }
}

export async function editReportMessageToFull(ctx){
  try{
    const userId = ctx.from?.id;
    const lang = await resolveUserLang(userId).catch(()=> 'ru');
    const isEn = String(lang).toLowerCase().startsWith('en');
    const snap=await getMarketSnapshot(['BTC','ETH','PAXG']);
    if(!snap?.ok) { await ctx.answerCbQuery(isEn?'Error':'–û—à–∏–±–∫–∞'); return; }
    const parts = buildMorningReportParts(
      snap.snapshots, lang, snap.atIsoKyiv || '', snap.fetchedAt ?? null,
      { btcDominancePct: snap.btcDominancePct, btcDominanceDelta: snap.btcDominanceDelta, spx: snap.spx, totals: snap.totals, fgiNow: snap.fgiNow, fgiDelta: snap.fgiDelta }
    );
    const kb = { inline_keyboard: [[
        { text: isEn ? 'Short report' : '–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç', callback_data: 'market_short' },
        { text: isEn ? 'Guide' : '–°–ø—Ä–∞–≤–∫–∞', callback_data: 'market_help' }
      ]] };
    await ctx.editMessageText(parts.headHtml, { parse_mode:'HTML', reply_markup: kb });
    await ctx.answerCbQuery(isEn?'Done.':'–ì–æ—Ç–æ–≤–æ.');
  } catch { try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {} }
}
