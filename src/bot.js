// src/bot.js
import { session } from 'telegraf';
import { ObjectId } from 'mongodb';
import { getCollections } from './db.js';
import { renderAlertsList, buildDeleteInlineForUser, getUserAlertsCached, invalidateUserAlertsCache } from './alerts.js';
import { refreshAllTickers, getPriceFast } from './pricing.js';
import { fmtNum } from './utils.js';
import { sendDailyToUser } from './motivation.js';
import { DELETE_MENU_LABEL, ENTRIES_PER_PAGE } from './config.js';

export async function setupBot(bot) {
  // session middleware
  bot.use(session());

  // obtain collections lazily (connectDb must be called before setupBot)
  const { usersCollection, alertsCollection, pendingDailySendsCollection } = getCollections();

  // activity middleware: update lastActive & keep language and recentSymbols up to date
  bot.use(async (ctx, next) => {
    if (!ctx.session) ctx.session = {};
    const uid = ctx.from?.id;
    if (uid) {
      try {
        await usersCollection.updateOne(
          { userId: uid },
          {
            $set: {
              userId: uid,
              username: ctx.from.username || null,
              lastActive: new Date(),
              language_code: ctx.from?.language_code || null
            },
            $setOnInsert: { createdAt: new Date(), recentSymbols: [] }
          },
          { upsert: true }
        );
      } catch (e) {
        console.error('activity middleware error', e);
      }
    }
    return next();
  });

  // /start
  bot.start(ctx => {
    ctx.session = {};
    ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏–ø—Ç—ã.',
      {
        reply_markup: {
          keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }],
            [{ text: 'üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é' }]
          ],
          resize_keyboard: true
        }
      }
    );
  });

  // Create alert: start flow
  bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç', async (ctx) => {
    ctx.session = { step: 'symbol' };
    refreshAllTickers().catch(() => {});
    try {
      const u = await usersCollection.findOne({ userId: ctx.from.id }, { projection: { recentSymbols: 1 } });
      const recent = Array.isArray(u?.recentSymbols) ? u.recentSymbols.slice(-6).reverse() : [];
      const suggest = [...new Set([...recent, 'BTC','ETH','SOL','BNB','XRP','DOGE'])].slice(0,6).map(s => ({ text: s }));
      const kb = suggest.length ? [suggest, [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]] : [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]];
      await ctx.reply('–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:', { reply_markup: { keyboard: kb, resize_keyboard: true } });
    } catch (e) {
      console.error('create alert keyboard error', e);
      await ctx.reply('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
      ctx.session = {};
    }
  });

  // Cancel
  bot.hears('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', ctx => {
    ctx.session = {};
    ctx.reply(
      '–û—Ç–º–µ–Ω–∞ ‚úÖ',
      {
        reply_markup: {
          keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }],
            [{ text: 'üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é' }]
          ],
          resize_keyboard: true
        }
      }
    );
  });

  // My alerts view (paginated)
  bot.hears('üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
    try {
      try { await bot.telegram.sendChatAction(ctx.chat.id, 'typing'); } catch (_) {}
      const { pages } = await renderAlertsList(ctx.from.id, { fast: false });
      const first = pages[0];
      await ctx.reply(first.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: first.buttons } });
    } catch (e) {
      console.error('–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã error', e);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤.');
    }
  });

  // Motivation button for testing (sends immediately to the user)
  bot.hears('üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é', async (ctx) => {
    try {
      const dateStr = new Date().toLocaleDateString('sv-SE', { timeZone: 'Europe/Kyiv' });
      // –æ–ø—Ü–∏—è silent: false –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        await sendDailyToUser(bot, ctx.from.id, dateStr, ctx.from?.language_code || 'ru', { silent: false });
      } catch (err) {
        if (err && (err.message === 'quote_pending' || err.message === 'no_motivation_yet')) {
          // —É–≤–µ–¥–æ–º–∏–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
          await ctx.reply('–ú–æ—Ç–∏–≤–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.');
          return;
        }
        console.error('sendDailyToUser error (button):', err);
        try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏'); } catch {}
        return;
      }
    } catch (e) {
      console.error('motivation button error', e);
      try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏'); } catch {}
    }
  });

  // Show delete menu for a specific page ‚Äî adds inline keyboard under existing text
  bot.action(/show_delete_menu_(\d+)/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const sourcePage = Math.max(0, parseInt(ctx.match[1], 10));
      const viewQuick = await renderAlertsList(ctx.from.id, { fast: true });
      const totalPages = viewQuick.pageCount || 1;
      const inline = await buildDeleteInlineForUser(ctx.from.id, { fast: true, sourcePage, totalPages });
      try {
        await ctx.editMessageReplyMarkup({ inline_keyboard: inline });
      } catch (err) {
        const originalText = ctx.update.callback_query.message?.text || '–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã';
        try { await ctx.reply(originalText, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: inline } }); } catch (e) { console.error('fallback reply failed', e); }
      }

      // background precise refresh to replace placeholders with fresh prices
      (async () => {
        try {
          const freshInline = await buildDeleteInlineForUser(ctx.from.id, { fast: false, sourcePage, totalPages });
          try { await ctx.editMessageReplyMarkup({ inline_keyboard: freshInline }); } catch {}
        } catch (err) { console.error('async refresh delete menu err', err); }
      })();
    } catch (e) {
      console.error('show_delete_menu error', e);
      try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
    }
  });

  // Show delete menu for all alerts
  bot.action('show_delete_menu_all', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const inline = await buildDeleteInlineForUser(ctx.from.id, { fast: true, sourcePage: null, totalPages: null });
      try {
        await ctx.editMessageReplyMarkup({ inline_keyboard: inline });
      } catch (err) {
        const originalText = ctx.update.callback_query.message?.text || '–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã';
        try { await ctx.reply(originalText, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: inline } }); } catch (e) { console.error('fallback show_delete_menu_all reply failed', e); }
      }

      (async () => {
        try {
          const freshInline = await buildDeleteInlineForUser(ctx.from.id, { fast: false, sourcePage: null, totalPages: null });
          try { await ctx.editMessageReplyMarkup({ inline_keyboard: freshInline }); } catch {}
        } catch (err) { console.error('async refresh show_delete_menu_all', err); }
      })();
    } catch (e) {
      console.error('show_delete_menu_all error', e);
      try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
    }
  });

  // Collapse back to alerts view (supports optional page back_to_alerts_p{N})
  bot.action(/back_to_alerts(?:_p(\d+))?/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const requestedPage = ctx.match && ctx.match[1] ? Math.max(0, parseInt(ctx.match[1], 10)) : 0;
      const { pages } = await renderAlertsList(ctx.from.id, { fast: true });
      const idx = Math.min(requestedPage, Math.max(0, pages.length - 1));
      const p = pages[idx] || pages[0];
      try {
        await ctx.editMessageText(p.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: p.buttons } });
      } catch {
        await ctx.reply(p.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: p.buttons } });
      }

      (async () => {
        try {
          const fresh = await renderAlertsList(ctx.from.id, { fast: false });
          const fp = fresh.pages[idx] || fresh.pages[0];
          try { await ctx.editMessageText(fp.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: fp.buttons } }); } catch {}
        } catch (err) { console.error('async refresh back_to_alerts err', err); }
      })();
    } catch (e) {
      console.error('back_to_alerts error', e);
      try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
    }
  });

  // Page navigation in view mode
  bot.action(/alerts_page_(\d+)_view/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const pageIndex = Math.max(0, parseInt(ctx.match[1], 10));
      const { pages } = await renderAlertsList(ctx.from.id, { fast: false });
      const idx = Math.max(0, Math.min(pageIndex, pages.length - 1));
      const p = pages[idx];
      try { await ctx.editMessageText(p.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: p.buttons } }); }
      catch { await ctx.reply(p.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: p.buttons } }); }
    } catch (e) {
      console.error('alerts_page action error', e);
      try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
    }
  });

  // Callback_query handler that includes deletion (authoritative page token encoded in callback_data as del_<id>_p{N|all})
  bot.on('callback_query', async (ctx) => {
    try {
      const data = ctx.callbackQuery?.data;
      if (!data) return ctx.answerCbQuery();

      const m = data.match(/^del_([0-9a-fA-F]{24})_p(all|\d+)$/);
      const mLegacy = !m && data.startsWith('del_') ? data.match(/^del_([0-9a-fA-F]{24})$/) : null;

      if (m || mLegacy) {
        const id = (m ? m[1] : mLegacy[1]);
        const token = m ? m[2] : null;

        const doc = await alertsCollection.findOne({ _id: new ObjectId(id) });
        if (!doc) { await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }

        // determine sourcePage: token overrides
        let sourcePage = null; // null === "all"
        if (token) {
          sourcePage = (token === 'all') ? null : Math.max(0, parseInt(token, 10));
        } else {
          // legacy fallback: compute index from cached alerts BEFORE deletion
          try {
            const alertsBefore = await getUserAlertsCached(ctx.from.id);
            const idxBefore = alertsBefore.findIndex(a => String(a._id) === String(doc._id) || a._id?.toString() === id);
            if (idxBefore >= 0) sourcePage = Math.floor(idxBefore / (ENTRIES_PER_PAGE || 20));
            else sourcePage = 0;
          } catch (e) { sourcePage = 0; }
        }

        // actual delete
        await alertsCollection.deleteOne({ _id: new ObjectId(id) });
        invalidateUserAlertsCache(ctx.from.id);

        // recompute pages after deletion
        const alertsAfter = await getUserAlertsCached(ctx.from.id);
        const computedTotalPages = Math.max(1, Math.ceil((alertsAfter?.length || 0) / (ENTRIES_PER_PAGE || 20)));

        if (sourcePage !== null) {
          sourcePage = Math.max(0, Math.min(sourcePage, computedTotalPages - 1));
        }

        // rebuild inline keyboard for the same page (or all)
        const inline = await buildDeleteInlineForUser(ctx.from.id, { fast: true, sourcePage, totalPages: (sourcePage === null ? null : computedTotalPages) });

        if (!inline || inline.length === 0) {
          try { await ctx.editMessageText('–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', { parse_mode: 'Markdown', reply_markup: { inline_keyboard: [] } }); } catch (e) { /*ignore*/ }
          await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
          return;
        }

        try {
          await ctx.editMessageReplyMarkup({ inline_keyboard: inline });
        } catch (err) {
          // fallback: send a new message with the same text + inline
          try {
            const originalText = ctx.update.callback_query.message?.text || '–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã';
            await ctx.reply(originalText, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: inline } });
          } catch (e) { console.error('fallback after delete failed', e); }
        }

        await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
        return;
      }

      // If it's not a del_ action ‚Äì leave default answer
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('callback_query error', e);
      try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
    }
  });

  // Text handler ‚Äì supports alert creation flow
  bot.on('text', async (ctx) => {
    try {
      const step = ctx.session.step;
      const text = (ctx.message.text || '').trim();

      if (!step && /^[A-Z0-9]{2,10}$/i.test(text)) ctx.session = { step: 'symbol' };
      if (!ctx.session.step) return;

      // Step: symbol
      if (ctx.session.step === 'symbol') {
        const base = text.toUpperCase();
        const symbol = `${base}-USDT`;
        const price = await getPriceFast(symbol);
        if (Number.isFinite(price)) {
          try { await usersCollection.updateOne({ userId: ctx.from.id }, { $pull: { recentSymbols: base } }); } catch (e) {}
          try { await usersCollection.updateOne({ userId: ctx.from.id }, { $push: { recentSymbols: { $each: [base], $slice: -20 } } }, { upsert: true }); } catch (e) {}
          ctx.session.symbol = symbol;
          ctx.session.step = 'alert_condition';
          await ctx.reply(`‚úÖ –ú–æ–Ω–µ—Ç–∞: *${symbol}*\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${fmtNum(price)}*\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:`, {
            parse_mode: 'Markdown',
            reply_markup: { keyboard: [[{ text: '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ' }, { text: '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ' }], [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true }
          });
        } else {
          await ctx.reply('–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ KuCoin. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª.');
          ctx.session = {};
        }
        return;
      }

      // Step: alert_condition
      if (ctx.session.step === 'alert_condition') {
        if (text === '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ') ctx.session.alertCondition = '>';
        else if (text === '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ') ctx.session.alertCondition = '<';
        else { await ctx.reply('–í—ã–±–µ—Ä–∏ ‚¨ÜÔ∏è –∏–ª–∏ ‚¨áÔ∏è'); return; }
        ctx.session.step = 'alert_price';
        await ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true } });
        return;
      }

      // Step: alert_price
      if (ctx.session.step === 'alert_price') {
        const v = parseFloat(text);
        if (!Number.isFinite(v)) { await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'); return; }
        ctx.session.alertPrice = v;
        ctx.session.step = 'ask_sl';
        const hint = ctx.session.alertCondition === '>' ? 'SL –±—É–¥–µ—Ç –≤—ã—à–µ (–¥–ª—è —à–æ—Ä—Ç–∞ ‚Äî –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è)' : 'SL –±—É–¥–µ—Ç –Ω–∏–∂–µ';
        await ctx.reply(`–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å? ${hint}`, { reply_markup: { keyboard: [[{ text: 'üõë –î–æ–±–∞–≤–∏—Ç—å SL' }, { text: '‚è≠Ô∏è –ë–µ–∑ SL' }], [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true } });
        return;
      }

      // Step: ask_sl
      if (ctx.session.step === 'ask_sl') {
        if (text === '‚è≠Ô∏è –ë–µ–∑ SL') {
          await alertsCollection.insertOne({ userId: ctx.from.id, symbol: ctx.session.symbol, condition: ctx.session.alertCondition, price: ctx.session.alertPrice, type: 'alert' });
          invalidateUserAlertsCache(ctx.from.id);
          const cp = await getPriceFast(ctx.session.symbol);
          await ctx.reply(`‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: *${ctx.session.symbol}* ${ctx.session.alertCondition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${fmtNum(ctx.session.alertPrice)}*\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${fmtNum(cp) ?? '‚Äî'}*`, { parse_mode: 'Markdown', reply_markup: { keyboard: [[{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }], [{ text: 'üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é' }]], resize_keyboard: true } });
          ctx.session = {};
          return;
        }
        if (text === 'üõë –î–æ–±–∞–≤–∏—Ç—å SL') {
          ctx.session.step = 'sl_price';
          await ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:', { reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true } });
          return;
        }
        await ctx.reply('–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é: üõë –î–æ–±–∞–≤–∏—Ç—å SL / ‚è≠Ô∏è –ë–µ–∑ SL');
        return;
      }

      // Step: sl_price
      if (ctx.session.step === 'sl_price') {
        const sl = parseFloat(text);
        if (!Number.isFinite(sl)) { await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ SL'); return; }
        const groupId = new ObjectId().toString();
        const slDir = ctx.session.alertCondition === '<' ? '–Ω–∏–∂–µ' : '–≤—ã—à–µ';
        await alertsCollection.insertMany([
          { userId: ctx.from.id, symbol: ctx.session.symbol, condition: ctx.session.alertCondition, price: ctx.session.alertPrice, type: 'alert', groupId },
          { userId: ctx.from.id, symbol: ctx.session.symbol, condition: ctx.session.alertCondition, price: sl, type: 'sl', slDir, groupId }
        ]);
        invalidateUserAlertsCache(ctx.from.id);
        const cp = await getPriceFast(ctx.session.symbol);
        await ctx.reply(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑–∫–∞:\nüîî *${ctx.session.symbol}* ${ctx.session.alertCondition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${fmtNum(ctx.session.alertPrice)}*\nüõë SL (${slDir}) *${fmtNum(sl)}*\n–¢–µ–∫—É—â–∞—è: *${fmtNum(cp) ?? '‚Äî'}*`, { parse_mode: 'Markdown', reply_markup: { keyboard: [[{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }], [{ text: 'üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é' }]], resize_keyboard: true } });
        ctx.session = {};
        return;
      }
    } catch (e) {
      console.error('text handler error', e);
      try { await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.'); } catch {}
      ctx.session = {};
    }
  });
}
