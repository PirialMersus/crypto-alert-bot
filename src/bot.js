// src/bot.js
import { Telegraf, session } from 'telegraf';
import dotenv from 'dotenv';
import { connectToMongo, ObjectId, countDocumentsWithTimeout } from './db.js';
import { createServer } from './server.js';
import { startTickersRefresher, refreshAllTickers, getCachedPrice } from './prices.js';
import { startAlertsChecker, renderAlertsList, buildDeleteInlineForUser, renderOldAlertsList } from './alerts.js';
import { removeInactive } from './cleanup.js';
import {
  getUserRecentSymbols,
  pushRecentSymbol,
  getUserAlertsOrder,
  setUserAlertsOrder,
  getUserAlertsCached,
  invalidateUserAlertsCache,
  statsCache,
  getUserAlertLimit,
  setUserAlertLimit
} from './cache.js';
import { fmtNum } from './utils.js';
import { sendDailyToUser, processDailyQuoteRetry, watchForNewQuotes, fetchAndStoreDailyMotivation } from './daily.js';
import { CACHE_TTL, INACTIVE_DAYS, DAY_MS, IMAGE_FETCH_HOUR, PREPARE_SEND_HOUR } from './constants.js';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const CREATOR_ID = process.env.CREATOR_ID ? parseInt(process.env.CREATOR_ID, 10) : null;
if (!BOT_TOKEN) throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');

export const bot = new Telegraf(BOT_TOKEN);

bot.use(session());
bot.use((ctx, next) => { if (!ctx.session) ctx.session = {}; return next(); });
bot.use(async (ctx, next) => {
  try {
    if (ctx.from && ctx.from.id) {
      const { usersCollection } = await import('./db.js');
      await usersCollection.updateOne(
        { userId: ctx.from.id },
        { $set: { userId: ctx.from.id, lastActive: new Date(), language_code: ctx.from.language_code || null } },
        { upsert: true }
      );
    }
  } catch (e) {
    console.warn('update lastActive failed', e?.message || e);
  }
  return next();
});

function getMainMenu(userId) {
  const keyboard = [
    [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }],
    [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
    [{ text: 'üìú –°—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã' }, { text: 'üîé –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤' }]
  ];
  if (CREATOR_ID && String(userId) === String(CREATOR_ID)) {
    keyboard.push([{ text: 'üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é' }]);
    keyboard.push([{ text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }]);
  }
  return { reply_markup: { keyboard, resize_keyboard: true } };
}

bot.start(ctx => { ctx.session = {}; ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏–ø—Ç—ã.', getMainMenu(ctx.from?.id)); });

bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => {
  try {
    const uid = ctx.from.id;
    const order = await getUserAlertsOrder(uid).catch(()=> 'new_bottom');
    const isTop = order === 'new_top';
    const inline = {
      inline_keyboard: [
        [
          { text: isTop ? '‚úÖ –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É' : '–ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É', callback_data: 'set_order_new_top' },
          { text: !isTop ? '‚úÖ –ù–æ–≤—ã–µ —Å–Ω–∏–∑—É' : '–ù–æ–≤—ã–µ —Å–Ω–∏–∑—É', callback_data: 'set_order_new_bottom' }
        ],
        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    };
    await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤:', { reply_markup: inline });
  } catch (e) {
    console.error(e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'); } catch {}
  }
});

bot.hears('–ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É', async (ctx) => {
  try {
    await setUserAlertsOrder(ctx.from.id, 'new_top');
    await ctx.reply('–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É', getMainMenu(ctx.from.id));
  } catch (e) {
    console.error(e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä—è–¥–∫–∞'); } catch {}
  }
});

bot.hears('–ù–æ–≤—ã–µ —Å–Ω–∏–∑—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)', async (ctx) => {
  try {
    await setUserAlertsOrder(ctx.from.id, 'new_bottom');
    await ctx.reply('–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É', getMainMenu(ctx.from.id));
  } catch (e) {
    console.error(e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä—è–¥–∫–∞'); } catch {}
  }
});

bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç', async (ctx) => {
  // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
  try {
    const { alertsCollection } = await import('./db.js');
    const limit = await getUserAlertLimit(ctx.from.id).catch(()=>10);
    let currentCount = 0;
    try {
      currentCount = await alertsCollection.countDocuments({ userId: ctx.from.id });
    } catch (e) {
      console.warn('countDocuments failed during create-start check', e?.message || e);
      const recent = await getUserAlertsCached(ctx.from.id).catch(()=>[]);
      currentCount = (recent?.length || 0);
    }
    if (currentCount >= limit) {
      await ctx.reply(`–£ —Ç–µ–±—è —É–∂–µ ${currentCount} –∞–ª–µ—Ä—Ç–æ–≤ ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${limit}. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç, –Ω–∞–ø–∏—à–∏ –º–Ω–µ: @pirial_gena`, getMainMenu(ctx.from.id));
      return;
    }
  } catch (e) {
    console.warn('pre-create limit check failed, allowing create flow', e?.message || e);
    // –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–ª–∞ ‚Äî –Ω–µ –º–µ—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }

  ctx.session = { step: 'symbol' };
  refreshAllTickers().catch(()=>{});
  const recent = await getUserRecentSymbols(ctx.from.id);
  const suggest = [...new Set([...recent, ...['BTC','ETH','SOL','BNB','XRP','DOGE']])].slice(0,6).map(s=>({ text: s }));
  const kb = suggest.length ? [suggest, [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]] : [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]];
  ctx.reply('–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:', { reply_markup: { keyboard: kb, resize_keyboard: true } });
});

bot.hears('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', ctx => { ctx.session = {}; ctx.reply('–û—Ç–º–µ–Ω–∞ ‚úÖ', getMainMenu(ctx.from.id)); });

bot.hears('üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
  try {
    try { await bot.telegram.sendChatAction(ctx.chat.id, 'typing'); } catch (_){ }
  } catch (e) { console.error(e); }
  try {
    const { pages } = await renderAlertsList(ctx.from.id, { fast: false });
    const first = pages[0];
    await ctx.reply(first.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: first.buttons } });
  } catch (e) {
    console.error(e);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤.');
  }
});

bot.hears('üìú –°—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
  // Start flow to select days; we'll hide keyboard after a selection (handled in text handler)
  ctx.session = { step: 'old_alerts_select_days' };
  const kb = [[{ text: '7 –¥–Ω–µ–π' }, { text: '30 –¥–Ω–µ–π' }, { text: '90 –¥–Ω–µ–π' }], [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]];
  await ctx.reply('–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:', { reply_markup: { keyboard: kb, resize_keyboard: true } });
});

bot.hears('üîé –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤', async (ctx) => {
  ctx.session = { step: 'old_alerts_search' };
  await ctx.reply('–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: SYMBOL [DAYS]\n–ü—Ä–∏–º–µ—Ä—ã: "BTC", "BTC 30". –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é DAYS=30.', { reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true } });
});

bot.hears('üåÖ –ü—Ä–∏—Å–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    const dateStr = new Date().toLocaleDateString('sv-SE', { timeZone: 'Europe/Kyiv' });
    const ok = await sendDailyToUser(bot, ctx.from.id, dateStr, { disableNotification: false });
    if (ok) {
      const { pendingDailySendsCollection } = await import('./db.js');
      await pendingDailySendsCollection.updateOne({ userId: ctx.from.id, date: dateStr }, { $set: { sent: true, sentAt: new Date(), quoteSent: true, permanentFail: false } }, { upsert: true });
    } else {
      const { pendingDailySendsCollection } = await import('./db.js');
      await pendingDailySendsCollection.updateOne({ userId: ctx.from.id, date: dateStr }, { $set: { sent: false, createdAt: new Date(), permanentFail: true } }, { upsert: true });
    }
  } catch (e) {
    console.error(e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏'); } catch {}
  }
});

bot.hears('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) { return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.'); }

    const now = Date.now();
    if (statsCache.count !== null && (now - statsCache.time) < CACHE_TTL) { return ctx.reply(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${INACTIVE_DAYS} –¥–Ω–µ–π: ${statsCache.count}`); }

    const cutoff = new Date(Date.now() - INACTIVE_DAYS * DAY_MS);
    let activeCount;
    try {
      // exclude users that we flagged as botBlocked
      activeCount = await countDocumentsWithTimeout('users', { lastActive: { $gte: cutoff }, $or: [{ botBlocked: { $exists: false } }, { botBlocked: false }] }, 7000);
    }
    catch (err) {
      console.error('–û—à–∏–±–∫–∞/—Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
      return ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ë–î). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    statsCache.count = activeCount;
    statsCache.time = now;
    await ctx.reply(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${INACTIVE_DAYS} –¥–Ω–µ–π: ${activeCount}`);
  } catch (e) { console.error('stats handler error', e); try { await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); } catch {} }
});

bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery?.data;
    if (!data) return ctx.answerCbQuery();

    const mPage = data.match(/^alerts_page_(\d+)_view$/);
    if (mPage) {
      const pageIdx = parseInt(mPage[1], 10);
      const { pages } = await renderAlertsList(ctx.from.id, { fast: true });
      const page = pages[Math.max(0, Math.min(pageIdx, pages.length - 1))] || pages[0];
      try {
        await ctx.editMessageText(page.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: page.buttons } });
      } catch (e) {
        try { await ctx.reply(page.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: page.buttons } }); } catch (e2) { console.error('alerts_page edit/reply failed', e2); }
      }
      await ctx.answerCbQuery();
      return;
    }

    const mShow = data.match(/^show_delete_menu_(all|\\d+)$/);
    if (mShow) {
      const token = mShow[1];
      const { pages } = await renderAlertsList(ctx.from.id, { fast: true });
      const totalPages = pages.length;
      let sourcePage = null;
      if (token !== 'all') sourcePage = Math.max(0, Math.min(parseInt(token, 10), totalPages - 1));
      const inline = await buildDeleteInlineForUser(ctx.from.id, { fast: true, sourcePage, totalPages: (sourcePage === null ? null : totalPages) });
      try { await ctx.editMessageReplyMarkup({ inline_keyboard: inline }); }
      catch (err) {
        try { const originalText = ctx.update.callback_query.message?.text || '–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã'; await ctx.reply(originalText, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: inline } }); } catch (e) { console.error('show_delete_menu reply failed', e); }
      }
      await ctx.answerCbQuery();
      return;
    }

    const mBack = data.match(/^back_to_alerts(?:_p(\d+))?$/);
    if (mBack) {
      const p = mBack[1] ? parseInt(mBack[1], 10) : 0;
      const { pages } = await renderAlertsList(ctx.from.id, { fast: true });
      const page = pages[Math.max(0, Math.min(p, pages.length - 1))] || pages[0];
      try { await ctx.editMessageText(page.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: page.buttons } }); }
      catch (e) { try { await ctx.reply(page.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: page.buttons } }); } catch (e2) { console.error('back_to_alerts failed', e2); } }
      await ctx.answerCbQuery();
      return;
    }

    const mSet = data.match(/^set_order_(new_top|new_bottom)$/);
    if (mSet) {
      const order = mSet[1];
      await setUserAlertsOrder(ctx.from.id, order).catch(()=>{});
      const orderNow = await getUserAlertsOrder(ctx.from.id).catch(()=> 'new_bottom');
      const isTop = orderNow === 'new_top';
      const inline = {
        inline_keyboard: [
          [
            { text: isTop ? '‚úÖ –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É' : '–ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É', callback_data: 'set_order_new_top' },
            { text: !isTop ? '‚úÖ –ù–æ–≤—ã–µ —Å–Ω–∏–∑—É' : '–ù–æ–≤—ã–µ —Å–Ω–∏–∑—É', callback_data: 'set_order_new_bottom' }
          ],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      };
      try {
        await ctx.editMessageReplyMarkup(inline);
      } catch (e) {
        try { await ctx.reply('–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', { reply_markup: inline }); } catch (e2) { console.error('set_order fallback failed', e2); }
      }
      await ctx.answerCbQuery('–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    if (data === 'back_to_main') {
      try { await ctx.reply('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', getMainMenu(ctx.from.id)); } catch (e) { console.error('back_to_main failed', e); }
      await ctx.answerCbQuery();
      return;
    }

    const m = data.match(/^del_([0-9a-fA-F]{24})_p(all|\d+)$/);
    const mLegacy = !m && data.startsWith('del_') ? data.match(/^del_([0-9a-fA-F]{24})$/) : null;

    if (m || mLegacy) {
      const id = (m ? m[1] : mLegacy[1]);
      const token = m ? m[2] : null;
      const { alertsCollection } = await import('./db.js');
      const doc = await alertsCollection.findOne({ _id: new ObjectId(id) });
      if (!doc) { await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }

      let sourcePage = null;
      if (token) { sourcePage = (token === 'all') ? null : Math.max(0, parseInt(token, 10)); }
      else {
        try {
          const alertsBefore = await getUserAlertsCached(ctx.from.id);
          const idxBefore = alertsBefore.findIndex(a => String(a._id) === String(doc._id) || a._id?.toString() === id);
          if (idxBefore >= 0) sourcePage = Math.floor(idxBefore / 20); else sourcePage = 0;
        } catch (e) { sourcePage = 0; }
      }

      // archive before deleting
      try {
        const { alertsArchiveCollection } = await import('./db.js');
        await alertsArchiveCollection.insertOne({
          ...doc,
          deletedAt: new Date(),
          deleteReason: 'user_deleted',
          archivedAt: new Date()
        });
      } catch (e) { console.warn('archive insert failed on user delete', e?.message || e); }

      const { alertsCollection: ac } = await import('./db.js');
      await ac.deleteOne({ _id: new ObjectId(id) });
      invalidateUserAlertsCache(ctx.from.id);

      const alertsAfter = await getUserAlertsCached(ctx.from.id);
      const computedTotalPages = Math.max(1, Math.ceil((alertsAfter?.length || 0) / 20));
      if (sourcePage !== null) { sourcePage = Math.max(0, Math.min(sourcePage, computedTotalPages - 1)); }

      const inline = await buildDeleteInlineForUser(ctx.from.id, { fast: true, sourcePage, totalPages: (sourcePage === null ? null : computedTotalPages) });

      if (!inline || inline.length === 0) {
        try { await ctx.editMessageText('–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', { parse_mode: 'Markdown', reply_markup: { inline_keyboard: [] } }); } catch {}
        await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
        return;
      }

      try { await ctx.editMessageReplyMarkup({ inline_keyboard: inline }); } catch (err) {
        try {
          const originalText = ctx.update.callback_query.message?.text || '–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã';
          await ctx.reply(originalText, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: inline } });
        } catch (e) { console.error('delete fallback failed', e); }
      }

      await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
      return;
    }

    const mOldPage = data.match(/^old_alerts_page_(\d+)_view_(d(\d+)_q(.+))$/);
    if (mOldPage) {
      const pageIdx = parseInt(mOldPage[1], 10);
      const token = mOldPage[2];
      const mToken = token.match(/^d(\d+)_q(.*)$/);
      const days = mToken ? parseInt(mToken[1], 10) : 30;
      const q = mToken ? decodeURIComponent(mToken[2]) : '';
      const opts = { days, symbol: q || null, token };
      const { pages } = await renderOldAlertsList(ctx.from.id, opts);
      const page = pages[Math.max(0, Math.min(pageIdx, pages.length - 1))] || pages[0];
      try {
        await ctx.editMessageText(page.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: page.buttons } });
      } catch (e) {
        try { await ctx.reply(page.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: page.buttons } }); } catch (e2) { console.error('old_alerts_page edit/reply failed', e2); }
      }
      await ctx.answerCbQuery();
      return;
    }

    await ctx.answerCbQuery();
  } catch (e) {
    console.error(e);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

bot.on('text', async (ctx) => {
  try {
    const step = ctx.session.step;
    const textRaw = (ctx.message.text || '').trim();
    const text = textRaw;

    // --- New: allow day-selection shortcuts even if session was cleared previously.
    // Only intercept when user is NOT in an active create-alert flow (to avoid breaking numeric price input).
    const daysMap = { '7 –¥–Ω–µ–π': 7, '30 –¥–Ω–µ–π': 30, '90 –¥–Ω–µ–π': 90 };
    const numeric = parseInt(text.replace(/\D/g, ''), 10);
    const isNumericDay = Number.isFinite(numeric) && [7, 30, 90].includes(numeric);
    const normalized = text.toLowerCase();
    const isDaysPhrase = daysMap[text] || daysMap[normalized] || isNumericDay || /^\d+\s*–¥–Ω/i.test(text);
    if (( !step || step === 'old_alerts_select_days' ) && isDaysPhrase) {
      // handle as old alerts selection
      const days = daysMap[text] || daysMap[normalized] || (isNumericDay ? numeric : 30);
      const token = `d${days}_q`;
      const { pages } = await renderOldAlertsList(ctx.from.id, { days, symbol: null, token });
      const first = pages[0];
      // clear session and remove reply keyboard
      ctx.session = {};
      if (first.buttons && first.buttons.length) {
        await ctx.reply(first.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: first.buttons, remove_keyboard: true } });
      } else {
        await ctx.reply(first.text, getMainMenu(ctx.from.id));
      }
      return;
    }

    if (!step && /^[A-Z0-9]{2,10}$/i.test(text)) ctx.session = { step: 'symbol' };
    if (!ctx.session.step) return;

    if (ctx.session.step === 'symbol') {
      const base = text.toUpperCase();
      const symbol = `${base}-USDT`;
      const price = await getCachedPrice(symbol);
      if (Number.isFinite(price)) {
        try { await pushRecentSymbol(ctx.from.id, base); } catch (e) {}
        ctx.session.symbol = symbol;
        ctx.session.step = 'alert_condition';
        await ctx.reply(`‚úÖ –ú–æ–Ω–µ—Ç–∞: *${symbol}* –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${fmtNum(price)}* –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:`, {
          parse_mode: 'Markdown',
          reply_markup: { keyboard: [[{ text: '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ' }, { text: '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ' }], [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true }
        });
      } else {
        await ctx.reply('–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ KuCoin. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª.');
        ctx.session = {};
      }
      return;
    }

    if (ctx.session.step === 'alert_condition') {
      if (text === '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ') ctx.session.alertCondition = '>';
      else if (text === '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ') ctx.session.alertCondition = '<';
      else { await ctx.reply('–í—ã–±–µ—Ä–∏ ‚¨ÜÔ∏è –∏–ª–∏ ‚¨áÔ∏è'); return; }
      ctx.session.step = 'alert_price';
      await ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true } });
      return;
    }

    if (ctx.session.step === 'alert_price') {
      const v = parseFloat(text);
      if (!Number.isFinite(v)) { await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'); return; }
      ctx.session.alertPrice = v;
      ctx.session.step = 'ask_sl';
      const hint = ctx.session.alertCondition === '>' ? 'SL –±—É–¥–µ—Ç –≤—ã—à–µ (–¥–ª—è —à–æ—Ä—Ç–∞ ‚Äî –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è)' : 'SL –±—É–¥–µ—Ç –Ω–∏–∂–µ';
      await ctx.reply(`–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å? ${hint}`, { reply_markup: { keyboard: [[{ text: 'üõë –î–æ–±–∞–≤–∏—Ç—å SL' }, { text: '‚è≠Ô∏è –ë–µ–∑ SL' }], [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true } });
      return;
    }

    if (ctx.session.step === 'ask_sl') {
      const { alertsCollection } = await import('./db.js');
      const limit = await getUserAlertLimit(ctx.from.id).catch(()=>10);
      let currentCount = 0;
      try {
        currentCount = await alertsCollection.countDocuments({ userId: ctx.from.id });
      } catch (e) {
        console.warn('countDocuments failed, falling back to cache count', e?.message || e);
        const currentAlerts = await getUserAlertsCached(ctx.from.id).catch(()=>[]);
        currentCount = (currentAlerts?.length || 0);
      }

      if (currentCount >= limit) {
        await ctx.reply(`–£ —Ç–µ–±—è —É–∂–µ ${currentCount} –∞–ª–µ—Ä—Ç–æ–≤ ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${limit}. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç, –Ω–∞–ø–∏—à–∏ –º–Ω–µ: @pirial_gena`, getMainMenu(ctx.from.id));
        ctx.session = {};
        return;
      }

      if (text === '‚è≠Ô∏è –ë–µ–∑ SL') {
        try {
          const { alertsCollection: ac } = await import('./db.js');

          // –µ—â—ë —Ä–∞–∑–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π (—á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ–Ω–∫–∏)
          const beforeInsertCount = await ac.countDocuments({ userId: ctx.from.id }).catch(()=>currentCount);
          if (beforeInsertCount >= limit) {
            await ctx.reply(`–£ —Ç–µ–±—è —É–∂–µ ${beforeInsertCount} –∞–ª–µ—Ä—Ç–æ–≤ ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${limit}. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç, –Ω–∞–ø–∏—à–∏ –º–Ω–µ: @pirial_gena`, getMainMenu(ctx.from.id));
            ctx.session = {};
            return;
          }

          await ac.insertOne({ userId: ctx.from.id, symbol: ctx.session.symbol, condition: ctx.session.alertCondition, price: ctx.session.alertPrice, type: 'alert', createdAt: new Date() });
          invalidateUserAlertsCache(ctx.from.id);
          const cp = await getCachedPrice(ctx.session.symbol);
          await ctx.reply(`‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: *${ctx.session.symbol}* ${ctx.session.alertCondition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${fmtNum(ctx.session.alertPrice)}* –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${fmtNum(cp) ?? '‚Äî'}*`, { parse_mode: 'Markdown', ...getMainMenu(ctx.from.id) });
        } catch (e) { console.error(e); await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞'); }
        ctx.session = {};
        return;
      }
      if (text === 'üõë –î–æ–±–∞–≤–∏—Ç—å SL') {
        ctx.session.step = 'sl_price';
        await ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:', { reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard:true } });
        return;
      }
      await ctx.reply('–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é: üõë –î–æ–±–∞–≤–∏—Ç—å SL / ‚è≠Ô∏è –ë–µ–∑ SL');
      return;
    }

    if (ctx.session.step === 'sl_price') {
      const sl = parseFloat(text);
      if (!Number.isFinite(sl)) { await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ SL'); return; }

      const { alertsCollection } = await import('./db.js');
      const limit = await getUserAlertLimit(ctx.from.id).catch(()=>10);
      let currentCount = 0;
      try {
        currentCount = await alertsCollection.countDocuments({ userId: ctx.from.id });
      } catch (e) {
        console.warn('countDocuments failed, falling back to cache count', e?.message || e);
        const currentAlerts = await getUserAlertsCached(ctx.from.id).catch(()=>[]);
        currentCount = (currentAlerts?.length || 0);
      }

      if (currentCount + 2 > limit) {
        await ctx.reply(`–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∫—É (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + SL). –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å ${currentCount} –∞–ª–µ—Ä—Ç–æ–≤, –ª–∏–º–∏—Ç ${limit}. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞–ø–∏—à–∏: @pirial_gena`, getMainMenu(ctx.from.id));
        ctx.session = {};
        return;
      }

      try {
        const groupId = new ObjectId().toString();

        const beforeInsertCount = await alertsCollection.countDocuments({ userId: ctx.from.id }).catch(()=>currentCount);
        if (beforeInsertCount + 2 > limit) {
          await ctx.reply(`–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∫—É (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + SL). –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å ${beforeInsertCount} –∞–ª–µ—Ä—Ç–æ–≤, –ª–∏–º–∏—Ç ${limit}. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞–ø–∏—à–∏: @pirial_gena`, getMainMenu(ctx.from.id));
          ctx.session = {};
          return;
        }

        const slDir = ctx.session.alertCondition === '<' ? '–Ω–∏–∂–µ' : '–≤—ã—à–µ';
        const { alertsCollection: ac } = await import('./db.js');
        await ac.insertMany([
          { userId: ctx.from.id, symbol: ctx.session.symbol, condition: ctx.session.alertCondition, price: ctx.session.alertPrice, type: 'alert', groupId, createdAt: new Date() },
          { userId: ctx.from.id, symbol: ctx.session.symbol, condition: ctx.session.alertCondition, price: sl, type: 'sl', slDir, groupId, createdAt: new Date() }
        ]);
        invalidateUserAlertsCache(ctx.from.id);
        const cp = await getCachedPrice(ctx.session.symbol);
        await ctx.reply(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑–∫–∞: üîî *${ctx.session.symbol}* ${ctx.session.alertCondition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${fmtNum(ctx.session.alertPrice)}*  üõë SL (${slDir}) *${fmtNum(sl)}* –¢–µ–∫—É—â–∞—è: *${fmtNum(cp) ?? '‚Äî'}*`, { parse_mode: 'Markdown', ...getMainMenu(ctx.from.id) });
      } catch (e) { console.error(e); await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∫–∏'); }
      ctx.session = {};
      return;
    }

    // Old alerts - user selected days (session-driven)
    if (ctx.session.step === 'old_alerts_select_days') {
      if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞') { ctx.session = {}; await ctx.reply('–û—Ç–º–µ–Ω–∞', getMainMenu(ctx.from.id)); return; }
      const daysMapLocal = { '7 –¥–Ω–µ–π': 7, '30 –¥–Ω–µ–π': 30, '90 –¥–Ω–µ–π': 90 };
      const days = daysMapLocal[text] || parseInt(text, 10) || 30;
      const token = `d${days}_q`;
      const { pages } = await renderOldAlertsList(ctx.from.id, { days, symbol: null, token });
      const first = pages[0];
      // clear session
      ctx.session = {};
      if (first.buttons && first.buttons.length) {
        await ctx.reply(first.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: first.buttons, remove_keyboard: true } });
      } else {
        await ctx.reply(first.text, getMainMenu(ctx.from.id));
      }
      return;
    }

    // Old alerts search
    if (ctx.session.step === 'old_alerts_search') {
      if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞') { ctx.session = {}; await ctx.reply('–û—Ç–º–µ–Ω–∞', getMainMenu(ctx.from.id)); return; }
      const parts = text.split(/\s+/).filter(Boolean);
      const symbol = parts[0] || null;
      const days = parts[1] ? Math.max(1, parseInt(parts[1], 10)) : 30;
      const token = `d${days}_q${encodeURIComponent(String(symbol || ''))}`;
      const { pages } = await renderOldAlertsList(ctx.from.id, { days, symbol, token });
      const first = pages[0];
      ctx.session = {};
      if (first.buttons && first.buttons.length) {
        await ctx.reply(first.text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: first.buttons, remove_keyboard: true } });
      } else {
        await ctx.reply(first.text, getMainMenu(ctx.from.id));
      }
      return;
    }

  } catch (e) {
    console.error('text handler error', e);
    try { await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.'); } catch {}
    ctx.session = {};
  }
});

bot.command('set_alert_limit', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) { return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.'); }
    const parts = (ctx.message.text || '').trim().split(/\s+/).slice(1);
    if (parts.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_alert_limit <userId|@username> <limit>');
    const ident = parts[0];
    const lim = parseInt(parts[1], 10);
    if (!Number.isFinite(lim) || lim < 0) return ctx.reply('–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');

    let targetId = parseInt(ident, 10);
    if (!Number.isFinite(targetId)) {
      let name = ident;
      if (!name.startsWith('@')) name = `@${name}`;
      try {
        const chat = await bot.telegram.getChat(name);
        targetId = chat.id;
      } catch (e) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É/–∏–º–µ–Ω–∏.');
      }
    }

    const newLim = await setUserAlertLimit(targetId, lim);
    if (newLim === null) return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞.');
    await ctx.reply(`–õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${newLim}`);
    try { await bot.telegram.sendMessage(targetId, `–¢–µ–±–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤: ${newLim} (–≤—Ä—É—á–Ω—É—é –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)`); } catch {}
  } catch (e) {
    console.error('set_alert_limit error', e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã'); } catch {}
  }
});

bot.command('get_alert_limit', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) { return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.'); }
    const parts = (ctx.message.text || '').trim().split(/\s+/).slice(1);
    if (parts.length < 1) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_alert_limit <userId|@username>');
    const ident = parts[0];
    let targetId = parseInt(ident, 10);
    if (!Number.isFinite(targetId)) {
      let name = ident;
      if (!name.startsWith('@')) name = `@${name}`;
      try {
        const chat = await bot.telegram.getChat(name);
        targetId = chat.id;
      } catch (e) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É/–∏–º–µ–Ω–∏.');
      }
    }
    const lim = await getUserAlertLimit(targetId);
    await ctx.reply(`–õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId}: ${lim}`);
  } catch (e) {
    console.error('get_alert_limit error', e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã'); } catch {}
  }
});

bot.command('refresh_daily', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');

    const dateStr = new Date().toLocaleDateString('sv-SE', { timeZone: 'Europe/Kyiv' });
    await ctx.reply(`‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ ${dateStr}...`);

    try {
      const cacheMod = await import('./cache.js');
      if (cacheMod && cacheMod.dailyCache) {
        cacheMod.dailyCache.date = null;
        cacheMod.dailyCache.doc = null;
        cacheMod.dailyCache.imageBuffer = null;
        await ctx.reply('–ö—ç—à dailyCache –æ—á–∏—â–µ–Ω.');
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å dailyCache', e);
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ (—Å–º –ª–æ–≥–∏). –ü—Ä–æ–¥–æ–ª–∂–∞—é.');
    }

    const daily = await import('./daily.js');
    const { dailyMotivationCollection } = await import('./db.js');

    let previewQuote = null;
    try {
      previewQuote = await daily.fetchQuoteFromAny();
      if (previewQuote && previewQuote.text) {
        await ctx.reply(`–ü—Ä–µ–≤—å—é —Ü–∏—Ç–∞—Ç—ã:\n${previewQuote.text}${previewQuote.author ? `\n‚Äî ${previewQuote.author}` : ''}`);
      } else {
        await ctx.reply('–ü—Ä–µ–≤—å—é —Ü–∏—Ç–∞—Ç—ã: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–µ—Ä–Ω—É–ª–∏ –ø—É—Å—Ç–æ).');
      }
    } catch (e) {
      console.error('preview fetchQuote error', e);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é —Ü–∏—Ç–∞—Ç—ã: ${String(e?.message || e)}`);
    }

    let previewImgInfo = null;
    try {
      if (typeof daily.fetchRandomImage === 'function') {
        const img = await daily.fetchRandomImage();
        if (img && img.url) {
          previewImgInfo = img;
          await ctx.reply(`–ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏: ${img.url} (${img.source || 'unknown'})`);
        } else {
          await ctx.reply('–ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.');
        }
      } else {
        await ctx.reply('–ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏: —Ñ—É–Ω–∫—Ü–∏—è fetchRandomImage –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      }
    } catch (e) {
      console.error('preview fetchImage error', e);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏: ${String(e?.message || e)}`);
    }

    let stored = null;
    try {
      stored = await daily.fetchAndStoreDailyMotivation(dateStr, { force: true });
      if (stored) {
        await ctx.reply('‚úÖ –¶–∏—Ç–∞—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (force).');
      } else {
        await ctx.reply('‚ö†Ô∏è fetchAndStoreDailyMotivation –≤–µ—Ä–Ω—É–ª null/undefined (–≤ –ë–î –º–æ–≥ –æ—Å—Ç–∞—Ç—å—Å—è —Å—Ç–∞—Ä—ã–π –¥–æ–∫—É–º–µ–Ω—Ç).');
      }
    } catch (e) {
      console.error('fetchAndStoreDailyMotivation error', e);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: ${String(e?.message || e)}`);
    }

    try {
      const doc = await dailyMotivationCollection.findOne({ date: dateStr });
      if (doc) {
        const q = doc.quote?.original || (doc.quote?.translations && doc.quote.translations.ru) || null;
        await ctx.reply(`–¢–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î:\n–¶–∏—Ç–∞—Ç–∞: ${q ? q : '‚Äî'}\n–ê–≤—Ç–æ—Ä: ${doc.quote?.author || '‚Äî'}\nImage URL: ${doc.image?.url || '‚Äî'}`);
      } else {
        await ctx.reply('–í –ë–î –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
      }
    } catch (e) {
      console.error('read stored doc error', e);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ doc –∏–∑ –ë–î: ${String(e?.message || e)}`);
    }

    try {
      const buf = await daily.ensureDailyImageBuffer(dateStr);
      if (buf && buf.length) {
        await ctx.reply(`–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å, —Ä–∞–∑–º–µ—Ä ${buf.length} –±–∞–π—Ç.`);
      } else {
        await ctx.reply('–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—ë–Ω —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).');
      }
    } catch (e) {
      console.error('ensureDailyImageBuffer error', e);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${String(e?.message || e)}`);
    }

    try {
      const ok = await daily.sendDailyToUser(bot, ctx.from.id, dateStr, { disableNotification: false, forceRefresh: true });
      if (ok) await ctx.reply('–ì–æ—Ç–æ–≤–æ ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ–±–µ.');
      else await ctx.reply('–ú–æ—Ç–∏–≤–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (—Å–º –ª–æ–≥–∏).');
    } catch (e) {
      console.error('sendDailyToUser error', e);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: ${String(e?.message || e)}`);
    }

  } catch (e) {
    console.error('refresh_daily top-level error', e);
    try { await ctx.reply('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ' + String(e?.message || e)); } catch {}
  }
});

export async function startBot() {
  await connectToMongo();
  startTickersRefresher();
  startAlertsChecker(bot);
  await removeInactive();
  const app = createServer();
  const PORT = process.env.PORT || 3000;
  const server = app.listen(PORT, () => console.log(`HTTP server on ${PORT}`));
  setInterval(() => processDailyQuoteRetry(bot), 60_000);
  setInterval(() => watchForNewQuotes(bot), 30_000);

  const dateStrNow = new Date().toLocaleDateString('sv-SE', { timeZone: 'Europe/Kyiv' });
  try { await fetchAndStoreDailyMotivation(dateStrNow).catch(()=>{}); } catch (e) { console.warn('initial fetchAndStoreDailyMotivation failed', e); }

  let lastFetchDay = null;
  let lastPrepareDay = null;

  setInterval(async () => {
    try {
      const kyivNow = new Date(new Date().toLocaleString('en-US', { timeZone: 'Europe/Kyiv' }));
      const day = kyivNow.toLocaleDateString('sv-SE');
      const hour = kyivNow.getHours();

      if (day !== lastFetchDay && hour === IMAGE_FETCH_HOUR) {
        try { await fetchAndStoreDailyMotivation(day, { force: true }); } catch (e) { console.warn('daily fetch failed', e); }
        lastFetchDay = day;
      }

      if (day !== lastPrepareDay && hour === PREPARE_SEND_HOUR) {
        try { await fetchAndStoreDailyMotivation(day, { force: false }); } catch (e) { console.warn('daily prepare failed', e); }
        lastPrepareDay = day;

        try {
          const dateStr = day;
          const { usersCollection, pendingDailySendsCollection } = await import('./db.js');
          const already = await pendingDailySendsCollection.find({ date: dateStr, sent: true }, { projection: { userId: 1 } }).toArray();
          const sentSet = new Set((already || []).map(r => r.userId));
          const cursor = usersCollection.find({}, { projection: { userId: 1 } });
          const BATCH = 20;
          let batch = [];
          while (await cursor.hasNext()) {
            const u = await cursor.next();
            if (!u || !u.userId) continue;
            const uid = u.userId;
            if (sentSet.has(uid)) continue;
            batch.push(uid);
            if (batch.length >= BATCH) {
              await Promise.all(batch.map(async (targetId) => {
                try {
                  const ok = await sendDailyToUser(bot, targetId, dateStr, { disableNotification: false, forceRefresh: false }).catch(()=>false);
                  await pendingDailySendsCollection.updateOne({ userId: targetId, date: dateStr }, { $set: { sent: !!ok, sentAt: ok ? new Date() : null, quoteSent: !!ok, permanentFail: !ok } }, { upsert: true });
                } catch (e) { console.warn('scheduled broadcast send failed to', targetId, e); }
              }));
              batch = [];
            }
          }
          if (batch.length) {
            await Promise.all(batch.map(async (targetId) => {
              try {
                const ok = await sendDailyToUser(bot, targetId, dateStr, { disableNotification: false, forceRefresh: false }).catch(()=>false);
                await pendingDailySendsCollection.updateOne({ userId: targetId, date: dateStr }, { $set: { sent: !!ok, sentAt: ok ? new Date() : null, quoteSent: !!ok, permanentFail: !ok } }, { upsert: true });
              } catch (e) { console.warn('scheduled broadcast send failed to', targetId, e); }
            }));
          }
        } catch (e) {
          console.warn('scheduled daily broadcast failed', e);
        }
      }
    } catch (e) { console.warn('daily scheduler error', e); }
  }, 60_000);

  setInterval(async () => {
    try {
      await removeInactive();
    } catch (e) { console.warn('weekly removeInactive failed', e); }
  }, 7 * DAY_MS);

  await bot.launch();
  console.log('Bot started');
  return { server };
}
