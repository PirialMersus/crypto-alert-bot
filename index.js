// crypto-bot/index.js
import { Telegraf, session } from 'telegraf';
import axios from 'axios';
import dotenv from 'dotenv';
import express from 'express';
import { MongoClient, ObjectId } from 'mongodb';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CREATOR_ID = process.env.CREATOR_ID ? parseInt(process.env.CREATOR_ID, 10) : null;
const INACTIVE_DAYS = 30; // —Å—á–∏—Ç–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º >30 –¥–Ω–µ–π
const CACHE_TTL = 70000; // 70 —Å–µ–∫—É–Ω–¥

if (!BOT_TOKEN) throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
if (!MONGO_URI) throw new Error('MONGO_URI –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');

const bot = new Telegraf(BOT_TOKEN);

// ------------------ –°–µ—Å—Å–∏–∏ ------------------
bot.use(session());
bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

// ------------------ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ------------------
const client = new MongoClient(MONGO_URI);
let alertsCollection;
let lastViewsCollection;
let usersCollection;

async function connectToMongo() {
  try {
    await client.connect();
    const db = client.db();
    alertsCollection = db.collection('alerts');
    lastViewsCollection = db.collection('last_alerts_view');
    usersCollection = db.collection('users');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    throw err;
  }
}
await connectToMongo();

// ------------------ HTTP —Å–µ—Ä–≤–µ—Ä ------------------
const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–Ω–≥–æ—à–∫–æ–π! üöÄ'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ------------------
process.on('uncaughtException', err => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err));
process.on('unhandledRejection', reason => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', reason));

// ------------------ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è) ------------------
function getMainMenu(userId) {
  const keyboard = [
    [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }]
  ];
  // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
  if (CREATOR_ID && String(userId) === String(CREATOR_ID)) {
    keyboard.push([{ text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }]);
  }
  return { reply_markup: { keyboard, resize_keyboard: true } };
}

// ------------------ –ö–≠–®–ò ------------------
const pricesCache = new Map();        // symbol -> { price, time }
const alertsCache = new Map();        // userId -> { alerts, time }
const lastViewsCache = new Map();     // userId -> { map: {symbol:lastPrice}, time }
const usersActivityCache = new Map(); // userId -> lastWriteTs (ms)
let statsCache = { count: null, time: 0 }; // –∫–µ—à –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// ------------------ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (KuCoin) —Å –∫–µ—à–µ–º ------------------
async function getPrice(symbol) {
  const now = Date.now();
  const cached = pricesCache.get(symbol);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.price;

  try {
    const res = await axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=${symbol}`);
    const price = parseFloat(res.data.data?.price);
    pricesCache.set(symbol, { price, time: now });
    return price;
  } catch (err) {
    console.error('getPrice error for', symbol, err?.message || err);
    return null;
  }
}

// ------------------ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) ------------------
async function getUserAlertsCached(userId) {
  const now = Date.now();
  const cached = alertsCache.get(userId);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.alerts;

  const alerts = await alertsCollection.find({ userId }).toArray();
  alertsCache.set(userId, { alerts, time: now });
  return alerts;
}
function invalidateUserAlertsCache(userId) {
  try {
    alertsCache.delete(userId);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è', userId, e);
  }
}

// ------------------ lastViews: —á—Ç–µ–Ω–∏–µ —Å –∫–µ—à–µ–º + –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å ------------------
async function getUserLastViewsCached(userId) {
  const now = Date.now();
  const cached = lastViewsCache.get(userId);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.map;

  const rows = await lastViewsCollection.find({ userId }).toArray();
  const map = Object.fromEntries(rows.map(r => [r.symbol, r.lastPrice]));
  lastViewsCache.set(userId, { map, time: now });
  return map;
}

// updates: { SYMBOL: price, ... }
// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ CACHE_TTL, –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–º—è—Ç—å
async function updateUserLastViews(userId, updates) {
  if (!userId) return;
  const now = Date.now();
  const cached = lastViewsCache.get(userId);

  if (cached && (now - cached.time) < CACHE_TTL) {
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
    Object.assign(cached.map, updates);
    return;
  }

  // –∏–Ω–∞—á–µ ‚Äî –ø–∏—à–µ–º –≤ –ë–î –æ–¥–Ω–∏–º bulkWrite –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
  const combined = { ...(cached ? cached.map : {}), ...updates };
  const ops = Object.entries(combined).map(([symbol, lastPrice]) => ({
    updateOne: {
      filter: { userId, symbol },
      update: { $set: { lastPrice } },
      upsert: true
    }
  }));

  if (ops.length) {
    try {
      await lastViewsCollection.bulkWrite(ops);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ bulkWrite lastViews:', e);
    }
  }
  lastViewsCache.set(userId, { map: combined, time: now });
}

// ------------------ Middleware: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastActive (rate-limited, –Ω–µ —á–∞—â–µ —á–µ–º CACHE_TTL) ------------------
bot.use(async (ctx, next) => {
  try {
    if (ctx.from && ctx.from.id) {
      const uid = ctx.from.id;
      const now = Date.now();
      const lastWrite = usersActivityCache.get(uid) || 0;
      if ((now - lastWrite) >= CACHE_TTL) {
        try {
          await usersCollection.updateOne(
            { userId: uid },
            { $set: { userId: uid, username: ctx.from.username || null, lastActive: new Date() } },
            { upsert: true }
          );
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ lastActive:', e);
        }
        usersActivityCache.set(uid, now);
        // –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –≤–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–µ–ª —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º —á–µ—Ä–µ–∑ TTL
        statsCache.time = 0;
      }
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ middleware –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', e);
  }
  return next();
});

// ------------------ –•–µ–ª–ø–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ------------------
function formatPercentRemaining(condition, targetPrice, currentPrice) {
  if (typeof currentPrice !== 'number' || typeof targetPrice !== 'number') return '';
  const diff = condition === '>' ? targetPrice - currentPrice : currentPrice - targetPrice;
  if ((condition === '>' && currentPrice < targetPrice) || (condition === '<' && currentPrice > targetPrice)) {
    return `(–æ—Å—Ç–∞–ª–æ—Å—å ${(diff / targetPrice * 100).toFixed(2)}% –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)`;
  }
  return '';
}
function formatChangeWithIcons(change) {
  const sign = change >= 0 ? '+' : '';
  const value = `${sign}${change.toFixed(2)}%`;
  if (change > 0) return `${value} üü¢‚¨ÜÔ∏è`;
  if (change < 0) return `${value} üî¥‚¨áÔ∏è`;
  return `${value}`;
}
const safeBold = text => `*${text}*`;

// ------------------ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ ------------------
async function renderAlertsList(userId) {
  const alerts = await getUserAlertsCached(userId);
  if (!alerts.length) return { text: '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', buttons: [] };

  const uniqueSymbols = [...new Set(alerts.map(a => a.symbol))];
  const pricesArr = await Promise.all(uniqueSymbols.map(sym => getPrice(sym)));
  const priceMap = Object.fromEntries(uniqueSymbols.map((sym, i) => [sym, typeof pricesArr[i] === 'number' ? pricesArr[i] : null]));

  const lastViewMap = await getUserLastViewsCached(userId);

  let msg = 'üìã *–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:*\n\n';
  const buttons = [];
  const updates = {};

  alerts.forEach((a, i) => {
    const currentPrice = priceMap[a.symbol];
    const titleLine = safeBold(`${i + 1}. ${a.symbol}`);

    if (currentPrice == null) {
      msg += `${titleLine}\n‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n\n`;
    } else {
      const percentText = formatPercentRemaining(a.condition, a.price, currentPrice);
      let changeSinceLast = '';
      if (typeof lastViewMap[a.symbol] === 'number') {
        const change = ((currentPrice - lastViewMap[a.symbol]) / lastViewMap[a.symbol]) * 100;
        changeSinceLast = `\nüìä –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${formatChangeWithIcons(change)}`;
      }

      msg += `${titleLine}\n` +
        `–£—Å–ª–æ–≤–∏–µ: ${a.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${a.price}*\n` +
        `–¢–µ–∫—É—â–∞—è: *${currentPrice}* ${percentText}${changeSinceLast}\n\n`;

      updates[a.symbol] = currentPrice;
    }

    buttons.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1} –ø–∞—Ä—É`, callback_data: `del_${a._id.toString()}` }]);
  });

  try {
    await updateUserLastViews(userId, updates);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ updateUserLastViews:', e);
  }

  return { text: msg, buttons };
}

// ------------------ Telegram handlers ------------------
bot.start((ctx) => {
  ctx.session = {};
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! üöÄ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã (KuCoin API).', getMainMenu(ctx.from?.id));
});

bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç', (ctx) => {
  ctx.session = { step: 'symbol' };
  ctx.reply('–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC):', {
    reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
  });
});

bot.hears('üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
  try {
    const { text, buttons } = await renderAlertsList(ctx.from.id);
    await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ "–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã":', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

// --------- –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è) ----------
bot.hears('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const now = Date.now();
    if (statsCache.count !== null && (now - statsCache.time) < CACHE_TTL) {
      return ctx.reply(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${INACTIVE_DAYS} –¥–Ω–µ–π: ${statsCache.count}`);
    }

    const cutoff = new Date(Date.now() - INACTIVE_DAYS * 24 * 60 * 60 * 1000);
    const activeCount = await usersCollection.countDocuments({ lastActive: { $gte: cutoff } });
    statsCache = { count: activeCount, time: now };
    await ctx.reply(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${INACTIVE_DAYS} –¥–Ω–µ–π: ${activeCount}`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

bot.hears('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', (ctx) => {
  ctx.session = {};
  ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', getMainMenu(ctx.from.id));
});

bot.on('text', async (ctx) => {
  try {
    const step = ctx.session.step;
    const text = ctx.message.text.trim();

    if (!step) return;

    if (step === 'symbol') {
      const symbol = text.toUpperCase();
      const fullSymbol = `${symbol}-USDT`;
      const price = await getPrice(fullSymbol);

      if (price) {
        ctx.session.symbol = fullSymbol;
        ctx.session.step = 'condition';
        ctx.reply(`‚úÖ –ú–æ–Ω–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: **${fullSymbol}**\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${price}*\n–í—ã–±–µ—Ä–∏ —É—Å–ª–æ–≤–∏–µ:`, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [
              [{ text: '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ' }, { text: '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ' }],
              [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]
            ],
            resize_keyboard: true
          }
        });
      } else {
        ctx.reply('‚ùå –¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç –Ω–∞ KuCoin. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É.');
      }

    } else if (step === 'condition') {
      if (text === '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ') ctx.session.condition = '>';
      else if (text === '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ') ctx.session.condition = '<';
      else return ctx.reply('–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚¨ÜÔ∏è –∏–ª–∏ ‚¨áÔ∏è');

      ctx.session.step = 'price';
      ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É:', {
        reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
      });

    } else if (step === 'price') {
      const priceValue = parseFloat(text);
      if (isNaN(priceValue)) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ü–µ–Ω—ã');

      ctx.session.price = priceValue;
      const currentPrice = await getPrice(ctx.session.symbol);

      if (currentPrice) {
        await alertsCollection.insertOne({
          userId: ctx.from.id,
          symbol: ctx.session.symbol,
          condition: ctx.session.condition,
          price: ctx.session.price
        });

        // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —é–∑–µ—Ä–∞ (—á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
        invalidateUserAlertsCache(ctx.from.id);

        ctx.reply(`‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: **${ctx.session.symbol}** ${ctx.session.condition} *${ctx.session.price}*\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${currentPrice}*`, { parse_mode: 'Markdown', ...getMainMenu(ctx.from.id) });
      } else {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', getMainMenu(ctx.from.id));
      }
      ctx.session = {};
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ on text:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.');
  }
});

// ------------------ –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ (callback) ------------------
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    if (!data?.startsWith('del_')) return ctx.answerCbQuery();

    const idStr = data.replace('del_', '');
    await alertsCollection.deleteOne({ _id: new ObjectId(idStr) });

    // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —é–∑–µ—Ä–∞
    invalidateUserAlertsCache(ctx.from.id);

    const { text, buttons } = await renderAlertsList(ctx.from.id);

    if (buttons.length) {
      try {
        await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
      } catch {
        await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
      }
    } else {
      try {
        await ctx.editMessageText('–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', { reply_markup: { inline_keyboard: [] } });
      } catch {}
      await ctx.reply('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', getMainMenu(ctx.from.id));
    }

    await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', err);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// ------------------ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥) ------------------
setInterval(async () => {
  try {
    const allAlerts = await alertsCollection.find({}).toArray();
    if (!allAlerts.length) return;

    const uniqueSymbols = [...new Set(allAlerts.map(a => a.symbol))];
    await Promise.all(uniqueSymbols.map(sym => getPrice(sym))); // getPrice —Å–∞–º –∫–µ—à–∏—Ä—É–µ—Ç

    for (const alert of allAlerts) {
      const currentPrice = pricesCache.get(alert.symbol)?.price;
      if (typeof currentPrice !== 'number') continue;

      if (
        (alert.condition === '>' && currentPrice > alert.price) ||
        (alert.condition === '<' && currentPrice < alert.price)
      ) {
        await bot.telegram.sendMessage(alert.userId,
          `üîî *–°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç!*\n–ú–æ–Ω–µ—Ç–∞: **${alert.symbol}**\n–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: *${currentPrice}*\n–¢–≤–æ—ë —É—Å–ª–æ–≤–∏–µ: ${alert.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${alert.price}*`,
          { parse_mode: 'Markdown' }
        );

        await alertsCollection.deleteOne({ _id: alert._id });

        // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç
        invalidateUserAlertsCache(alert.userId);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤:', err);
  }
}, 120000);

// ------------------ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ------------------
async function removeInactiveUsers() {
  try {
    const cutoff = new Date(Date.now() - INACTIVE_DAYS * 24 * 60 * 60 * 1000);
    const inactiveUsers = await usersCollection.find({ lastActive: { $lt: cutoff } }).toArray();

    if (!inactiveUsers.length) return;

    const ids = inactiveUsers.map(u => u.userId);
    await alertsCollection.deleteMany({ userId: { $in: ids } });
    await lastViewsCollection.deleteMany({ userId: { $in: ids } });
    await usersCollection.deleteMany({ userId: { $in: ids } });

    // –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ids.forEach(id => {
      invalidateUserAlertsCache(id);
      usersActivityCache.delete(id);
      lastViewsCache.delete(id);
    });

    // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statsCache.time = 0;

    console.log(`–£–¥–∞–ª–µ–Ω–æ ${ids.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (>${INACTIVE_DAYS} –¥–Ω–µ–π) –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ.`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∑–∞—Ç–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
await removeInactiveUsers();
setInterval(removeInactiveUsers, 24 * 60 * 60 * 1000);

// ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
bot.launch().then(() => console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫—ç—à–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏'));
