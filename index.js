// crypto-bot/index.js
// –§–∞–π–ª: crypto-bot/index.js ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π –∞–ª–µ—Ä—Ç–æ–≤ –∏ CRUD –≤ MongoDB

import { Telegraf, session } from 'telegraf';
import axios from 'axios';
import dotenv from 'dotenv';
import express from 'express';
import { MongoClient, ObjectId } from 'mongodb';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CREATOR_ID = process.env.CREATOR_ID ? parseInt(process.env.CREATOR_ID, 10) : null;
const INACTIVE_DAYS = 30; // —Å—á–∏—Ç–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º >30 –¥–Ω–µ–π
const CACHE_TTL = 70000; // 70 —Å–µ–∫—É–Ω–¥

if (!BOT_TOKEN) throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
if (!MONGO_URI) throw new Error('MONGO_URI –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');

const bot = new Telegraf(BOT_TOKEN);

// ------------------ –°–µ—Å—Å–∏–∏ ------------------
bot.use(session());
bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

// ------------------ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ------------------
const client = new MongoClient(MONGO_URI);
let alertsCollection;
let lastViewsCollection;
let usersCollection;

async function connectToMongo() {
  try {
    await client.connect();
    const db = client.db();
    alertsCollection = db.collection('alerts');
    lastViewsCollection = db.collection('last_alerts_view');
    usersCollection = db.collection('users');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    throw err;
  }
}
await connectToMongo();

// ------------------ HTTP —Å–µ—Ä–≤–µ—Ä ------------------
const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–Ω–≥–æ—à–∫–æ–π! üöÄ'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ------------------
process.on('uncaughtException', err => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err));
process.on('unhandledRejection', reason => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', reason));

// ------------------ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è) ------------------
function getMainMenu(userId) {
  const keyboard = [
    [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }]
  ];
  if (CREATOR_ID && String(userId) === String(CREATOR_ID)) {
    keyboard.push([{ text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }]);
  }
  return { reply_markup: { keyboard, resize_keyboard: true } };
}

// ------------------ –ö–≠–®–ò ------------------
const pricesCache = new Map(); // symbol -> { price, time }
const alertsCache = new Map(); // userId -> { alerts, time }
const lastViewsCache = new Map(); // userId -> { map: {symbol:lastPrice}, time }
const usersActivityCache = new Map(); // userId -> lastWriteTs (ms)
let statsCache = { count: null, time: 0 }; // –∫–µ—à –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// ------------------ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (KuCoin) —Å –∫–µ—à–µ–º ------------------
async function getPrice(symbol) {
  const now = Date.now();
  const cached = pricesCache.get(symbol);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.price;

  try {
    const res = await axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=${symbol}`);
    const price = parseFloat(res.data.data?.price);
    pricesCache.set(symbol, { price, time: now });
    return price;
  } catch (err) {
    console.error('getPrice error for', symbol, err?.message || err);
    return null;
  }
}

// ------------------ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) ------------------
async function getUserAlertsCached(userId) {
  const now = Date.now();
  const cached = alertsCache.get(userId);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.alerts;

  const alerts = await alertsCollection.find({ userId }).toArray();
  alertsCache.set(userId, { alerts, time: now });
  return alerts;
}
function invalidateUserAlertsCache(userId) {
  try {
    alertsCache.delete(userId);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è', userId, e);
  }
}

// ------------------ lastViews: —á—Ç–µ–Ω–∏–µ —Å –∫–µ—à–µ–º + –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å ------------------
async function getUserLastViewsCached(userId) {
  const now = Date.now();
  const cached = lastViewsCache.get(userId);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.map;

  const rows = await lastViewsCollection.find({ userId }).toArray();
  const map = Object.fromEntries(rows.map(r => [r.symbol, r.lastPrice]));
  lastViewsCache.set(userId, { map, time: now });
  return map;
}

// updates: { SYMBOL: price, ... }
async function updateUserLastViews(userId, updates) {
  if (!userId) return;
  const now = Date.now();
  const cached = lastViewsCache.get(userId);

  if (cached && (now - cached.time) < CACHE_TTL) {
    Object.assign(cached.map, updates);
    return;
  }

  const combined = { ...(cached ? cached.map : {}), ...updates };
  const ops = Object.entries(combined).map(([symbol, lastPrice]) => ({
    updateOne: {
      filter: { userId, symbol },
      update: { $set: { lastPrice } },
      upsert: true
    }
  }));

  if (ops.length) {
    try {
      await lastViewsCollection.bulkWrite(ops);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ bulkWrite lastViews:', e);
    }
  }
  lastViewsCache.set(userId, { map: combined, time: now });
}

// ------------------ Middleware: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastActive ------------------
bot.use(async (ctx, next) => {
  try {
    if (ctx.from && ctx.from.id) {
      const uid = ctx.from.id;
      const now = Date.now();
      const lastWrite = usersActivityCache.get(uid) || 0;
      if ((now - lastWrite) >= CACHE_TTL) {
        try {
          await usersCollection.updateOne(
            { userId: uid },
            { $set: { userId: uid, username: ctx.from.username || null, lastActive: new Date() } },
            { upsert: true }
          );
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ lastActive:', e);
        }
        usersActivityCache.set(uid, now);
        statsCache.time = 0;
      }
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ middleware –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', e);
  }
  return next();
});

// ------------------ –•–µ–ª–ø–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ------------------
function formatPercentRemaining(condition, targetPrice, currentPrice) {
  if (typeof currentPrice !== 'number' || typeof targetPrice !== 'number') return '';
  const diff = condition === '>' ? targetPrice - currentPrice : currentPrice - targetPrice;
  if ((condition === '>' && currentPrice < targetPrice) || (condition === '<' && currentPrice > targetPrice)) {
    return `(–æ—Å—Ç–∞–ª–æ—Å—å ${(diff / targetPrice * 100).toFixed(2)}% –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)`;
  }
  return '';
}
function formatChangeWithIcons(change) {
  const sign = change >= 0 ? '+' : '';
  const value = `${sign}${change.toFixed(2)}%`;
  if (change > 0) return `${value} Ô∏èüöÄüìà`;
  if (change < 0) return `${value} Ô∏èüõ¨üìâ`;
  return `${value}`;
}
const safeBold = text => `*${text}*`;

// ------------------ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ ------------------
/**
 renderAlertsList(userId, options)
 options.includeDeleteButtons: boolean
 –ø—Ä–∏ includeDeleteButtons = false –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç + –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É "üßπ –£–¥–∞–ª–∏—Ç—å..."
 –ø—Ä–∏ includeDeleteButtons = true –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç + –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∞–ª–µ—Ä—Ç) + –∫–Ω–æ–ø–∫—É "‚óÄÔ∏è –ù–∞–∑–∞–¥"
 –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { text, buttons } –≥–¥–µ buttons ‚Äî inline_keyboard (–º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤).
 */
async function renderAlertsList(userId, options = { includeDeleteButtons: false }) {
  const alerts = await getUserAlertsCached(userId);
  if (!alerts.length) return { text: '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', buttons: [] };

  const uniqueSymbols = [...new Set(alerts.map(a => a.symbol))];
  const pricesArr = await Promise.all(uniqueSymbols.map(sym => getPrice(sym)));
  const priceMap = Object.fromEntries(uniqueSymbols.map((sym, i) => [sym, typeof pricesArr[i] === 'number' ? pricesArr[i] : null]));

  const lastViewMap = await getUserLastViewsCached(userId);

  let msg = 'üìã *–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:*\n\n';
  const buttons = [];
  const updates = {};

  alerts.forEach((a, i) => {
    const currentPrice = priceMap[a.symbol];
    const titleLine = safeBold(`${i + 1}. ${a.symbol}`);

    if (currentPrice == null) {
      msg += `${titleLine}\n‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n\n`;
    } else {
      const percentText = formatPercentRemaining(a.condition, a.price, currentPrice);
      let changeSinceLast = '';
      if (typeof lastViewMap[a.symbol] === 'number') {
        const change = ((currentPrice - lastViewMap[a.symbol]) / lastViewMap[a.symbol]) * 100;
        changeSinceLast = `\nüìä –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${formatChangeWithIcons(change)}`;
      }

      msg += `${titleLine}\n` +
        `–£—Å–ª–æ–≤–∏–µ: ${a.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${a.price}*\n` +
        `–¢–µ–∫—É—â–∞—è: *${currentPrice}* ${percentText}${changeSinceLast}\n\n`;

      updates[a.symbol] = currentPrice;
    }
  });

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã (–±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ)
  try {
    await updateUserLastViews(userId, updates);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ updateUserLastViews:', e);
  }

  // —Ñ–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –æ–ø—Ü–∏–∏
  if (options.includeDeleteButtons) {
    // –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –Ω–∞ –∞–ª–µ—Ä—Ç + –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    alerts.forEach((a, i) => {
      buttons.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1} ${a.symbol}`, callback_data: `del_${a._id.toString()}` }]);
    });
    buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_alerts' }]);
  } else {
    // –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å..."
    buttons.push([{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É ‚Ññ...', callback_data: 'show_delete_menu' }]);
  }

  return { text: msg, buttons };
}

// ------------------ Telegram handlers ------------------
bot.start((ctx) => {
  ctx.session = {};
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! üöÄ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã (KuCoin API).', getMainMenu(ctx.from?.id));
});

bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç', (ctx) => {
  ctx.session = { step: 'symbol' };
  ctx.reply('–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC):', {
    reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
  });
});

// ==== –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ + –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å..." ====
bot.hears('üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
  try {
    const { text, buttons } = await renderAlertsList(ctx.from.id, { includeDeleteButtons: false });
    await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ "–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã":', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

// --------- –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–∞—Ç–∏–µ "–£–¥–∞–ª–∏—Ç—å...") ----------
bot.action('show_delete_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const userId = ctx.from.id;
    const { text, buttons } = await renderAlertsList(userId, { includeDeleteButtons: true });
    try {
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
    } catch {
      await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ show_delete_menu:', e);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// --------- –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è ----------
bot.action('back_to_alerts', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const userId = ctx.from.id;
    const { text, buttons } = await renderAlertsList(userId, { includeDeleteButtons: false });
    try {
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
    } catch {
      await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ back_to_alerts:', e);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// --------- –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ (callback del_<id>) ----------
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    if (!data) return ctx.answerCbQuery();

    // –µ—Å–ª–∏ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
    if (data.startsWith('del_')) {
      const idStr = data.replace('del_', '');
      await alertsCollection.deleteOne({ _id: new ObjectId(idStr) });

      // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —é–∑–µ—Ä–∞
      invalidateUserAlertsCache(ctx.from.id);

      // –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ
      const { text, buttons } = await renderAlertsList(ctx.from.id, { includeDeleteButtons: true });

      if (buttons.length) {
        try {
          await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
        } catch {
          await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
        }
      } else {
        // –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try {
          await ctx.editMessageText('–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', { reply_markup: { inline_keyboard: [] } });
        } catch {}
        await ctx.reply('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', getMainMenu(ctx.from.id));
      }

      await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
      return;
    }

    // –µ—Å–ª–∏ data ‚Äî –Ω–∞—à–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä show_delete_menu –∏–ª–∏ back_to_alerts),
    // —ç—Ç–∏ –∫–µ–π—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ bot.action –≤—ã—à–µ ‚Äî –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç.
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', err);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// ------------------ –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ñ–æ–Ω–µ –∏ —Ç.–¥.) ------------------
// –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤,
// —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
// –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –≤ –≤–∞—à–µ–º —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ ‚Äî –æ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –Ω–æ–≤—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ.

// ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
bot.launch().then(() => console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫—ç—à–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏'));
