// crypto-bot/index.js
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π –∞–ª–µ—Ä—Ç–æ–≤ –∏ CRUD –≤ MongoDB

import { Telegraf, session } from 'telegraf';
import axios from 'axios';
import dotenv from 'dotenv';
import express from 'express';
import { MongoClient, ObjectId } from 'mongodb';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CREATOR_ID = process.env.CREATOR_ID ? parseInt(process.env.CREATOR_ID, 10) : null;
const INACTIVE_DAYS = 30; // —Å—á–∏—Ç–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º >30 –¥–Ω–µ–π
const CACHE_TTL = 10000; // 10 —Å–µ–∫—É–Ω–¥ (ms) ‚Äî –∫–µ—à —Ü–µ–Ω—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –∫—Ä–∞—Ç–∫–æ–∂–∏–≤—É—â–∏—Ö –∫–µ—à–µ–π

if (!BOT_TOKEN) throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
if (!MONGO_URI) throw new Error('MONGO_URI –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');

const bot = new Telegraf(BOT_TOKEN);

// ------------------ –°–µ—Å—Å–∏–∏ ------------------
bot.use(session());
bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

// ------------------ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ------------------
const client = new MongoClient(MONGO_URI);
let alertsCollection;
let lastViewsCollection;
let usersCollection;

async function connectToMongo() {
  try {
    await client.connect();
    const db = client.db();
    alertsCollection = db.collection('alerts');
    lastViewsCollection = db.collection('last_alerts_view');
    usersCollection = db.collection('users');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    throw err;
  }
}
await connectToMongo();

// ------------------ HTTP —Å–µ—Ä–≤–µ—Ä ------------------
const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–Ω–≥–æ—à–∫–æ–π! üöÄüöÄüöÄ'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ------------------
process.on('uncaughtException', err => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err));
process.on('unhandledRejection', reason => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', reason));

// ------------------ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è) ------------------
function getMainMenu(userId) {
  const keyboard = [
    [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }]
  ];
  if (CREATOR_ID && String(userId) === String(CREATOR_ID)) {
    keyboard.push([{ text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }]);
  }
  return { reply_markup: { keyboard, resize_keyboard: true } };
}

// ------------------ –ö–≠–®–ò ------------------
const pricesCache = new Map();        // symbol -> { price, time }
const alertsCache = new Map();        // userId -> { alerts, time }
const lastViewsCache = new Map();     // userId -> { map: {symbol:lastPrice}, time }
const usersActivityCache = new Map(); // userId -> lastWriteTs (ms)
let statsCache = { count: null, time: 0 }; // –∫–µ—à –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –î–æ–ø. –∫—ç—à–∏ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
let allAlertsCache = { alerts: null, time: 0 }; // global alerts cache for background check
const requestCache = new Map(); // key -> { time, value, promise }

// ------------------ Request cache + helpers ------------------
async function getCachedResponse(key, fetcher) {
  const now = Date.now();
  const cached = requestCache.get(key);

  // 1) —Å–≤–µ–∂–∏–π value ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
  if (cached && cached.value && (now - cached.time) < CACHE_TTL) {
    return cached.value;
  }

  // 2) –µ—Å–ª–∏ –µ—Å—Ç—å in-flight promise ‚Äî –∂–¥—ë–º –µ–≥–æ (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π fetch)
  if (cached && cached.promise) {
    return await cached.promise;
  }

  // 3) –∑–∞–ø—É—Å–∫–∞–µ–º fetch –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º promise
  const p = (async () => {
    try {
      const val = await fetcher();
      requestCache.set(key, { time: Date.now(), value: val }); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return val;
    } catch (err) {
      // –ø—Ä–∏ –æ—à–∏–±–∫–µ —á–∏—Å—Ç–∏–º –∫–µ—à —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
      requestCache.delete(key);
      throw err;
    }
  })();

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å (—á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–∂–¥–∞–ª–∏—Å—å)
  requestCache.set(key, { promise: p });
  return await p;
}

function invalidateRequestCachePrefix(prefix) {
  for (const k of requestCache.keys()) {
    if (k.startsWith(prefix)) requestCache.delete(k);
  }
}

// ------------------ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (KuCoin) —Å –∫–µ—à–µ–º + dedupe ------------------
const pricePromises = new Map();

async function getPrice(symbol) {
  const now = Date.now();
  const cached = pricesCache.get(symbol);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.price;

  if (pricePromises.has(symbol)) return pricePromises.get(symbol);

  const p = axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=${symbol}`)
    .then(res => {
      const price = parseFloat(res.data.data?.price);
      pricesCache.set(symbol, { price, time: Date.now() });
      pricePromises.delete(symbol);
      return price;
    })
    .catch(err => {
      pricePromises.delete(symbol);
      console.error('getPrice error for', symbol, err?.message || err);
      return null;
    });

  pricePromises.set(symbol, p);
  return await p;
}

// ------------------ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) ------------------
async function getUserAlertsCached(userId) {
  const now = Date.now();
  const cached = alertsCache.get(userId);
  if (cached && (now - cached.time) < CACHE_TTL) return cached.alerts;

  const alerts = await alertsCollection.find({ userId }).toArray();
  alertsCache.set(userId, { alerts, time: now });
  return alerts;
}
function invalidateUserAlertsCache(userId) {
  try {
    alertsCache.delete(userId);
    // –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä-–∫–µ—à –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—â—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏)
    try { invalidateRequestCachePrefix(`renderAlerts:${userId}:`); } catch {}
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è', userId, e);
  }
}

// ------------------ allAlerts cached (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏) ------------------
async function getAllAlertsCached() {
  const now = Date.now();
  if (allAlertsCache.alerts && (now - allAlertsCache.time) < CACHE_TTL) {
    return allAlertsCache.alerts;
  }
  const allAlerts = await alertsCollection.find({}).toArray();
  allAlertsCache = { alerts: allAlerts, time: now };
  return allAlerts;
}

// ------------------ lastViews: buffered read/write ------------------
// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞/–±—É—Ñ–µ—Ä–∞
const lastViewsWriteTimers = new Map();   // userId -> timeoutId
const lastViewsLastWriteTs = new Map();   // userId -> timestamp ms

// –ß—Ç–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ in-memory –∫–µ—à–∞, –∏–Ω–∞—á–µ –∏–∑ –ë–î –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à
async function getUserLastViewsCachedOrDb(userId) {
  if (!userId) return {};
  const now = Date.now();
  const cached = lastViewsCache.get(userId);
  if (cached && (now - cached.time) < CACHE_TTL) {
    return cached.map;
  }

  try {
    const rows = await lastViewsCollection.find({ userId }).toArray();
    const map = Object.fromEntries(rows.map(r => {
      const raw = r?.lastPrice;
      const num = (typeof raw === 'number') ? raw : (raw == null ? null : Number(raw));
      return [r.symbol, Number.isFinite(num) ? num : null];
    }));
    lastViewsCache.set(userId, { map, time: now });
    return map;
  } catch (e) {
    console.error('getUserLastViewsCachedOrDb error:', e);
    lastViewsCache.set(userId, { map: {}, time: now });
    return {};
  }
}

// –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î (bulkWrite)
async function writeUserLastViewsToDb(userId, updates) {
  if (!userId || !updates || Object.keys(updates).length === 0) return;
  const ops = Object.entries(updates).map(([symbol, lastPrice]) => ({
    updateOne: {
      filter: { userId, symbol },
      update: { $set: { lastPrice } },
      upsert: true
    }
  }));
  try {
    await lastViewsCollection.bulkWrite(ops);
    lastViewsLastWriteTs.set(userId, Date.now());
  } catch (e) {
    console.error('writeUserLastViewsToDb bulkWrite error:', e);
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–æ–≤)
function scheduleWriteLastViews(userId) {
  if (lastViewsWriteTimers.has(userId)) return;

  const timer = setTimeout(async () => {
    lastViewsWriteTimers.delete(userId);
    const cached = lastViewsCache.get(userId);
    if (!cached || !cached.map) return;
    await writeUserLastViewsToDb(userId, cached.map);
    cached.time = Date.now();
    lastViewsCache.set(userId, cached);
  }, CACHE_TTL);

  lastViewsWriteTimers.set(userId, timer);
}

// Buffered update: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à –∏ —Ä–µ—à–∞–µ–º ‚Äî –ø–∏—Å–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å
async function updateUserLastViewsBuffered(userId, updates) {
  if (!userId || !updates || Object.keys(updates).length === 0) return;
  const now = Date.now();

  // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–∞
  const normalized = {};
  for (const [sym, v] of Object.entries(updates)) {
    const num = (typeof v === 'number') ? v : (v == null ? NaN : Number(v));
    if (Number.isFinite(num)) normalized[sym] = num;
  }
  if (!Object.keys(normalized).length) return;

  const cached = lastViewsCache.get(userId) || { map: {}, time: 0 };
  Object.assign(cached.map, normalized);
  cached.time = now;
  lastViewsCache.set(userId, cached);

  const lastWrite = lastViewsLastWriteTs.get(userId) || 0;
  if ((now - lastWrite) >= CACHE_TTL) {
    // –µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—à–ª–æ >= TTL ‚Äî –ø–∏—à–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    await writeUserLastViewsToDb(userId, cached.map);
  } else {
    // –∏–Ω–∞—á–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞)
    scheduleWriteLastViews(userId);
  }
}

// –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
function clearLastViewsUser(userId) {
  const t = lastViewsWriteTimers.get(userId);
  if (t) {
    clearTimeout(t);
    lastViewsWriteTimers.delete(userId);
  }
  lastViewsLastWriteTs.delete(userId);
  lastViewsCache.delete(userId);
}

// ------------------ Middleware: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastActive (rate-limited) ------------------
bot.use(async (ctx, next) => {
  try {
    if (ctx.from && ctx.from.id) {
      const uid = ctx.from.id;
      const now = Date.now();
      const lastWrite = usersActivityCache.get(uid) || 0;
      if ((now - lastWrite) >= CACHE_TTL) {
        try {
          await usersCollection.updateOne(
            { userId: uid },
            { $set: { userId: uid, username: ctx.from.username || null, lastActive: new Date() } },
            { upsert: true }
          );
          usersActivityCache.set(uid, now); // —Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ lastActive:', e);
        }
        // –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statsCache.time = 0;
      }
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ middleware –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', e);
  }
  return next();
});

// ------------------ –•–µ–ª–ø–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ------------------
function formatPercentRemaining(condition, targetPrice, currentPrice) {
  if (typeof currentPrice !== 'number' || typeof targetPrice !== 'number') return '';
  const diff = condition === '>' ? targetPrice - currentPrice : currentPrice - targetPrice;
  if ((condition === '>' && currentPrice < targetPrice) || (condition === '<' && currentPrice > targetPrice)) {
    return `(–æ—Å—Ç–∞–ª–æ—Å—å ${(diff / targetPrice * 100).toFixed(2)}% –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)`;
  }
  return '';
}
function formatChangeWithIcons(change) {
  const sign = change >= 0 ? '+' : '';
  const value = `${sign}${change.toFixed(2)}%`;
  if (change > 0) return `${value} üìà`;
  if (change < 0) return `${value} üìâ`;
  return `${value}`;
}
const safeBold = text => `*${text}*`;

// ------------------ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ ------------------
/**
 renderAlertsList(userId, options)
 options.includeDeleteButtons: boolean
 –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { text, buttons } –≥–¥–µ buttons ‚Äî inline_keyboard (–º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤).
 */
async function renderAlertsList(userId, options = { includeDeleteButtons: false }) {
  const alerts = await getUserAlertsCached(userId);
  if (!alerts.length) return { text: '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', buttons: [] };

  const uniqueSymbols = [...new Set(alerts.map(a => a.symbol))];
  const pricesArr = await Promise.all(uniqueSymbols.map(sym => getPrice(sym)));
  const priceMap = Object.fromEntries(uniqueSymbols.map((sym, i) => [sym, typeof pricesArr[i] === 'number' ? pricesArr[i] : null]));

  // –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ lastViews –∏–∑ –ë–î/–∫—ç—à–∞ –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ
  const lastViewMap = await getUserLastViewsCachedOrDb(userId);

  let msg = 'üìã *–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:*\n\n';
  const buttons = [];
  const updates = {}; // –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastPrice –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

  alerts.forEach((a, i) => {
    const currentPrice = priceMap[a.symbol];
    const titleLine = safeBold(`${i + 1}. ${a.symbol}`);

    if (currentPrice == null || !Number.isFinite(currentPrice)) {
      msg += `${titleLine}\n‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n\n`;
    } else {
      const percentText = formatPercentRemaining(a.condition, a.price, currentPrice);

      // –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      let changeSinceLast = '';
      const lastRaw = lastViewMap[a.symbol];
      const last = (typeof lastRaw === 'number') ? lastRaw : (lastRaw == null ? null : Number(lastRaw));

      if (Number.isFinite(last) && last > 0) {
        const change = ((currentPrice - last) / last) * 100;
        changeSinceLast = `\n–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${formatChangeWithIcons(change)}`;
      } else if (Number.isFinite(last) && last === 0) {
        // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å ‚Äî –ø–æ–∫–∞–∂–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É
        const diff = currentPrice - last;
        changeSinceLast = `\n–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${diff.toFixed(8)} (–∞–±—Å.)`;
      } // –∏–Ω–∞—á–µ ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ

      msg += `${titleLine}\n` +
        `–£—Å–ª–æ–≤–∏–µ: ${a.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${a.price}*\n` +
        `–¢–µ–∫—É—â–∞—è: *${currentPrice}* ${percentText}${changeSinceLast}\n\n`;

      // –ø–æ–º–µ—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastPrice ‚Äî –≤—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à/–±—É—Ñ–µ—Ä,
      // —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫–ª–∏–∫–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–∫–∞.
      updates[a.symbol] = currentPrice;
    }
  });

  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ lastPrice –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ (–≤ –∫—ç—à –∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º write-buffer)
  try {
    await updateUserLastViewsBuffered(userId, updates);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ updateUserLastViewsBuffered:', e);
  }

  // —Ñ–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –æ–ø—Ü–∏–∏
  if (options.includeDeleteButtons) {
    alerts.forEach((a, i) => {
      const conditionText = a.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ';
      buttons.push([{
        text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1}: ${a.symbol} (${conditionText} ${a.price})`,
        callback_data: `del_${a._id.toString()}`
      }]);
    });
    buttons.push([{ text: '‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å', callback_data: 'back_to_alerts' }]);
  } else {
    buttons.push([{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É ‚Ññ ...', callback_data: 'show_delete_menu' }]);
  }

  return { text: msg, buttons };
}

// ------------------ Telegram handlers ------------------
bot.start((ctx) => {
  ctx.session = {};
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! üöÄ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã.', getMainMenu(ctx.from?.id));
});

bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç', (ctx) => {
  ctx.session = { step: 'symbol' };
  ctx.reply('–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC):', {
    reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
  });
});

// –≤—ã–∑—ã–≤–∞–µ–º renderAlertsList –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã lastViews –±—ã–ª–∏ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã
bot.hears('üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
  try {
    const { text, buttons } = await renderAlertsList(ctx.from.id, { includeDeleteButtons: false });
    await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ "–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã":', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

// --------- –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–∞—Ç–∏–µ "–£–¥–∞–ª–∏—Ç—å...") ----------
bot.action('show_delete_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const userId = ctx.from.id;
    const { text, buttons } = await renderAlertsList(userId, { includeDeleteButtons: true });
    try {
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
    } catch {
      await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ show_delete_menu:', e);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// --------- –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è ----------
bot.action('back_to_alerts', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const userId = ctx.from.id;
    const { text, buttons } = await renderAlertsList(userId, { includeDeleteButtons: false });
    try {
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
    } catch {
      await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ back_to_alerts:', e);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// ------------------ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –Ω–∞–¥–µ–∂–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä (–¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è) ------------------
// helper: countDocuments —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function countDocumentsWithTimeout(filter, ms = 7000) {
  if (!usersCollection) throw new Error('usersCollection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  return await Promise.race([
    usersCollection.countDocuments(filter),
    new Promise((_, reject) => setTimeout(() => reject(new Error('mongo_timeout')), ms))
  ]);
}

bot.hears('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async (ctx) => {
  try {
    if (!CREATOR_ID || String(ctx.from.id) !== String(CREATOR_ID)) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const now = Date.now();
    if (statsCache.count !== null && (now - statsCache.time) < CACHE_TTL) {
      return ctx.reply(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${INACTIVE_DAYS} –¥–Ω–µ–π: ${statsCache.count}`);
    }

    if (!usersCollection) {
      console.error('–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äî usersCollection –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞');
      return ctx.reply('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.');
    }

    const cutoff = new Date(Date.now() - INACTIVE_DAYS * 24 * 60 * 60 * 1000);

    let activeCount;
    try {
      activeCount = await countDocumentsWithTimeout({ lastActive: { $gte: cutoff } }, 7000);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞/—Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
      return ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ë–î). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    statsCache = { count: activeCount, time: now };
    await ctx.reply(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${INACTIVE_DAYS} –¥–Ω–µ–π: ${activeCount}`);
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
    try { await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); } catch {}
  }
});

// --------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤) ----------
bot.hears('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', (ctx) => {
  ctx.session = {};
  ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', getMainMenu(ctx.from.id));
});

bot.on('text', async (ctx) => {
  try {
    const step = ctx.session.step;
    const text = ctx.message.text.trim();

    if (!step) return;

    if (step === 'symbol') {
      const symbol = text.toUpperCase();
      const fullSymbol = `${symbol}-USDT`;
      const price = await getPrice(fullSymbol);

      if (price) {
        ctx.session.symbol = fullSymbol;
        ctx.session.step = 'condition';
        ctx.reply(`‚úÖ –ú–æ–Ω–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: **${fullSymbol}**\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${price}*\n–í—ã–±–µ—Ä–∏ —É—Å–ª–æ–≤–∏–µ:`, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [
              [{ text: '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ' }, { text: '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ' }],
              [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]
            ],
            resize_keyboard: true
          }
        });
      } else {
        ctx.reply('‚ùå –¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç –Ω–∞ KuCoin. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É.');
      }

    } else if (step === 'condition') {
      if (text === '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ') ctx.session.condition = '>';
      else if (text === '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ') ctx.session.condition = '<';
      else return ctx.reply('–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚¨ÜÔ∏è –∏–ª–∏ ‚¨áÔ∏è');

      ctx.session.step = 'price';
      ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É:', {
        reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
      });

    } else if (step === 'price') {
      const priceValue = parseFloat(text);
      if (isNaN(priceValue)) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ü–µ–Ω—ã');

      ctx.session.price = priceValue;
      const currentPrice = await getPrice(ctx.session.symbol);

      if (currentPrice) {
        await alertsCollection.insertOne({
          userId: ctx.from.id,
          symbol: ctx.session.symbol,
          condition: ctx.session.condition,
          price: ctx.session.price
        });

        // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        invalidateUserAlertsCache(ctx.from.id);
        allAlertsCache.time = 0;

        ctx.reply(`‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: **${ctx.session.symbol}** ${ctx.session.condition} *${ctx.session.price}*\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${currentPrice}*`, { parse_mode: 'Markdown', ...getMainMenu(ctx.from.id) });
      } else {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', getMainMenu(ctx.from.id));
      }
      ctx.session = {};
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ on text:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.');
  }
});

// --------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query (–≤–∫–ª—é—á–∞—è del_) ----------
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    if (!data) return ctx.answerCbQuery();

    if (data.startsWith('del_')) {
      const idStr = data.replace('del_', '');
      const alertToDelete = await alertsCollection.findOne({ _id: new ObjectId(idStr) });
      if (!alertToDelete) {
        await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      await alertsCollection.deleteOne({ _id: new ObjectId(idStr) });

      // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —é–∑–µ—Ä–∞
      invalidateUserAlertsCache(ctx.from.id);
      allAlertsCache.time = 0;

      // –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ (—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —É–¥–∞–ª–∏—Ç—å –µ—â—ë)
      const { text, buttons } = await renderAlertsList(ctx.from.id, { includeDeleteButtons: true });

      if (buttons.length) {
        try {
          await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
        } catch {
          await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: buttons } });
        }
      } else {
        try {
          await ctx.editMessageText('–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', { reply_markup: { inline_keyboard: [] } });
        } catch {}
        await ctx.reply('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', getMainMenu(ctx.from.id));
      }

      await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
      return;
    }

    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', err);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch {}
  }
});

// ------------------ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥) ------------------
setInterval(async () => {
  try {
    const allAlerts = await getAllAlertsCached();
    if (!allAlerts.length) return;

    const uniqueSymbols = [...new Set(allAlerts.map(a => a.symbol))];
    await Promise.all(uniqueSymbols.map(sym => getPrice(sym))); // getPrice —Å–∞–º –∫–µ—à–∏—Ä—É–µ—Ç –∏ –¥–µ–¥—É–ø–ª–∏—Ä—É–µ—Ç

    for (const alert of allAlerts) {
      const currentPrice = pricesCache.get(alert.symbol)?.price;
      if (typeof currentPrice !== 'number') continue;

      if (
        (alert.condition === '>' && currentPrice > alert.price) ||
        (alert.condition === '<' && currentPrice < alert.price)
      ) {
        await bot.telegram.sendMessage(alert.userId,
          `üîî *–°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç!*\n–ú–æ–Ω–µ—Ç–∞: **${alert.symbol}**\n–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: *${currentPrice}*\n–¢–≤–æ—ë —É—Å–ª–æ–≤–∏–µ: ${alert.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${alert.price}*`,
          { parse_mode: 'Markdown' }
        );

        await alertsCollection.deleteOne({ _id: alert._id });

        // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç
        invalidateUserAlertsCache(alert.userId);
      }
    }
    // –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫ ‚Äî –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    allAlertsCache.time = 0;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤:', err);
  }
}, 120000);

// ------------------ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ------------------
async function removeInactiveUsers() {
  try {
    const cutoff = new Date(Date.now() - INACTIVE_DAYS * 24 * 60 * 60 * 1000);
    const inactiveUsers = await usersCollection.find({ lastActive: { $lt: cutoff } }).toArray();

    if (!inactiveUsers.length) return;

    const ids = inactiveUsers.map(u => u.userId);
    await alertsCollection.deleteMany({ userId: { $in: ids } });
    await lastViewsCollection.deleteMany({ userId: { $in: ids } });
    await usersCollection.deleteMany({ userId: { $in: ids } });

    // –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ids.forEach(id => {
      invalidateUserAlertsCache(id);
      usersActivityCache.delete(id);
      clearLastViewsUser(id);
    });

    // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statsCache.time = 0;

    // –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    allAlertsCache.time = 0;

    console.log(`–£–¥–∞–ª–µ–Ω–æ ${ids.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (>${INACTIVE_DAYS} –¥–Ω–µ–π) –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ.`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∑–∞—Ç–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
await removeInactiveUsers();
setInterval(removeInactiveUsers, 24 * 60 * 60 * 1000);

// ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
bot.launch().then(() => console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫—ç—à–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏'));
