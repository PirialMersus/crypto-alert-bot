// crypto-bot/index.js
import { Telegraf, session } from 'telegraf';
import axios from 'axios';
import dotenv from 'dotenv';
import express from 'express';
import { MongoClient, ObjectId } from 'mongodb';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.use(session());
bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

// ------------------ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ------------------
const client = new MongoClient(process.env.MONGO_URI);
let alertsCollection;
let lastViewsCollection;

async function connectToMongo() {
  try {
    await client.connect();
    const db = client.db();
    alertsCollection = db.collection('alerts');
    lastViewsCollection = db.collection('last_alerts_view');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
  }
}
await connectToMongo();

// ------------------ HTTP —Å–µ—Ä–≤–µ—Ä ------------------
const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–Ω–≥–æ—à–∫–æ–π! üöÄüöÄüöÄ'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ------------------
process.on('uncaughtException', err => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err));
process.on('unhandledRejection', reason => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', reason));

const mainMenu = {
  reply_markup: {
    keyboard: [
      [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç' }, { text: 'üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã' }]
    ],
    resize_keyboard: true
  }
};

// ------------------ –ö—ç—à —Ü–µ–Ω ------------------
const pricesCache = new Map(); // symbol -> { price, time }
const CACHE_TTL = 15000; // 15 —Å–µ–∫—É–Ω–¥

async function getPrice(symbol) {
  const now = Date.now();
  const cached = pricesCache.get(symbol);
  if (cached && (now - cached.time) < CACHE_TTL) {
    return cached.price;
  }
  try {
    const res = await axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=${symbol}`);
    const price = parseFloat(res.data.data?.price);
    pricesCache.set(symbol, { price, time: now });
    return price;
  } catch (err) {
    console.error('getPrice error for', symbol, err?.message || err);
    return null;
  }
}

// ------------------ Helpers ------------------
function formatPercentRemaining(condition, targetPrice, currentPrice) {
  if (typeof currentPrice !== 'number' || typeof targetPrice !== 'number') return '';
  if (condition === '>' && currentPrice < targetPrice) {
    const pct = ((targetPrice - currentPrice) / targetPrice) * 100;
    return `(–æ—Å—Ç–∞–ª–æ—Å—å ${pct.toFixed(2)}% –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)`;
  }
  if (condition === '<' && currentPrice > targetPrice) {
    const pct = ((currentPrice - targetPrice) / targetPrice) * 100;
    return `(–æ—Å—Ç–∞–ª–æ—Å—å ${pct.toFixed(2)}% –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)`;
  }
  return '';
}

function formatChangeWithIcons(change) {
  // change ‚Äî —á–∏—Å–ª–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const sign = change >= 0 ? '+' : '';
  const value = `${sign}${change.toFixed(2)}%`;
  if (change > 0) return `${value} üü¢‚¨ÜÔ∏è`;
  if (change < 0) return `${value} üî¥‚¨áÔ∏è`;
  return `${value}`;
}

function safeBold(text) {
  // –ü—Ä–æ—Å—Ç–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –≤ Markdown (–º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Å–∏–º–≤–æ–ª—ã —Ç–∏–∫–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã)
  return `*${text}*`;
}

// ------------------ Telegram ------------------
bot.start((ctx) => {
  ctx.session = {};
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! üöÄ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã (KuCoin API).', mainMenu);
});

bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç', (ctx) => {
  ctx.session = { step: 'symbol' };
  ctx.reply('–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC):', {
    reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
  });
});

// --- –ì–ª–∞–≤–Ω–æ–µ: –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã ---
bot.hears('üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userAlerts = await alertsCollection.find({ userId }).toArray();

    if (!userAlerts.length) {
      return ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', mainMenu);
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞—Ç—å API –ª–∏—à–Ω–∏–π —Ä–∞–∑)
    const uniqueSymbols = [...new Set(userAlerts.map(a => a.symbol))];

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const pricePromises = uniqueSymbols.map(sym => getPrice(sym));
    const priceResults = await Promise.all(pricePromises);
    const priceMap = {};
    uniqueSymbols.forEach((sym, i) => {
      priceMap[sym] = (typeof priceResults[i] === 'number') ? priceResults[i] : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ lastViews –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const lastViews = await lastViewsCollection.find({ userId }).toArray();
    const hasPrevView = lastViews.length > 0;
    const lastViewMap = Object.fromEntries(lastViews.map(v => [v.symbol, v.lastPrice]));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å ‚Äî –Ω–æ–º–µ—Ä + –ø–∞—Ä–∞ –∂–∏—Ä–Ω—ã–º, –∑–∞—Ç–µ–º —É—Å–ª–æ–≤–∏–µ/—Ü–µ–Ω–∞/–ø—Ä–æ—Ü–µ–Ω—Ç—ã
    let msg = 'üìã *–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:*\n\n';
    const buttons = []; // inline-–∫–Ω–æ–ø–∫–∏: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∞–ª–µ—Ä—Ç—É (—Ç–µ–∫—Å—Ç: ‚ùå –£–¥–∞–ª–∏—Ç—å N –ø–∞—Ä—É)
    const updatePromises = [];

    for (let i = 0; i < userAlerts.length; i++) {
      const a = userAlerts[i];
      const currentPrice = priceMap[a.symbol];

      // –ù–æ–º–µ—Ä –∏ –ø–∞—Ä–∞ (–∂–∏—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
      const titleLine = safeBold(`${i + 1} ${a.symbol}`);

      if (currentPrice === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' || currentPrice === null) {
        msg += `${titleLine}\n‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n\n`;
        buttons.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1} –ø–∞—Ä—É`, callback_data: `del_${a._id.toString()}` }]);
        continue;
      }

      const percentText = formatPercentRemaining(a.condition, a.price, currentPrice);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –ø—Ä–æ—Å–º–æ—Ç—Ä
      let changeSinceLast = '';
      if (hasPrevView && lastViewMap[a.symbol] !== undefined && typeof lastViewMap[a.symbol] === 'number') {
        const change = ((currentPrice - lastViewMap[a.symbol]) / lastViewMap[a.symbol]) * 100;
        changeSinceLast = `\nüìä –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${formatChangeWithIcons(change)}`;
      }

      msg += `${titleLine}\n` +
        `–£—Å–ª–æ–≤–∏–µ: ${a.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${a.price}*\n` +
        `–¢–µ–∫—É—â–∞—è: *${currentPrice}* ${percentText}${changeSinceLast}\n\n`;

      // –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå –£–¥–∞–ª–∏—Ç—å N –ø–∞—Ä—É
      buttons.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1} –ø–∞—Ä—É`, callback_data: `del_${a._id.toString()}` }]);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º upsert lastPrice (—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–∏—Å—ã)
      updatePromises.push(
        lastViewsCollection.updateOne(
          { userId, symbol: a.symbol },
          { $set: { lastPrice: currentPrice } },
          { upsert: true }
        ).catch(e => console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è lastPrice', e))
      );
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ upsert –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.all(updatePromises);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏. –ö–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ—è –∫–Ω–æ–ø–∫–∞.
    await ctx.replyWithMarkdown(msg, {
      reply_markup: { inline_keyboard: buttons }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ "–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã":', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

// --- –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ ---
bot.hears('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', (ctx) => {
  ctx.session = {};
  ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', mainMenu);
});

bot.on('text', async (ctx) => {
  try {
    const step = ctx.session.step;
    const text = ctx.message.text.trim();

    if (!step) return;

    if (step === 'symbol') {
      const symbol = text.toUpperCase();
      const fullSymbol = `${symbol}-USDT`;
      const price = await getPrice(fullSymbol);

      if (price) {
        ctx.session.symbol = fullSymbol;
        ctx.session.step = 'condition';
        ctx.reply(`‚úÖ –ú–æ–Ω–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: **${fullSymbol}**\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${price}*\n–í—ã–±–µ—Ä–∏ —É—Å–ª–æ–≤–∏–µ:`, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [
              [{ text: '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ' }, { text: '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ' }],
              [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]
            ],
            resize_keyboard: true
          }
        });
      } else {
        ctx.reply('‚ùå –¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç –Ω–∞ KuCoin. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É.');
      }

    } else if (step === 'condition') {
      if (text === '‚¨ÜÔ∏è –ö–æ–≥–¥–∞ –≤—ã—à–µ') ctx.session.condition = '>';
      else if (text === '‚¨áÔ∏è –ö–æ–≥–¥–∞ –Ω–∏–∂–µ') ctx.session.condition = '<';
      else return ctx.reply('–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚¨ÜÔ∏è –∏–ª–∏ ‚¨áÔ∏è');

      ctx.session.step = 'price';
      ctx.reply('–í–≤–µ–¥–∏ —Ü–µ–Ω—É:', {
        reply_markup: { keyboard: [[{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞' }]], resize_keyboard: true }
      });

    } else if (step === 'price') {
      const priceValue = parseFloat(text);
      if (isNaN(priceValue)) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ü–µ–Ω—ã');

      ctx.session.price = priceValue;
      const currentPrice = await getPrice(ctx.session.symbol);

      if (currentPrice) {
        await alertsCollection.insertOne({
          userId: ctx.from.id,
          symbol: ctx.session.symbol,
          condition: ctx.session.condition,
          price: ctx.session.price
        });
        ctx.reply(`‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: **${ctx.session.symbol}** ${ctx.session.condition} *${ctx.session.price}*\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${currentPrice}*`, { parse_mode: 'Markdown', ...mainMenu });
      } else {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', mainMenu);
      }
      ctx.session = {};
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ on text:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.');
  }
});

// --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ ---
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    if (!data || !data.startsWith('del_')) {
      return ctx.answerCbQuery();
    }

    const id = data.replace('del_', '');
    // –£–¥–∞–ª—è–µ–º –∞–ª–µ—Ä—Ç
    await alertsCollection.deleteOne({ _id: new ObjectId(id) });

    // –ü–æ–ª—É—á–∞–µ–º userId –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
    const userId = ctx.from.id;

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
    const updatedAlerts = await alertsCollection.find({ userId }).toArray();

    if (!updatedAlerts.length) {
      // –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é
      try {
        await ctx.editMessageText('–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.', { reply_markup: { inline_keyboard: [] } });
      } catch (e) {
        // –∏–Ω–æ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
      await ctx.reply('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', mainMenu);
      await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const uniqueSymbols = [...new Set(updatedAlerts.map(a => a.symbol))];
    const pricePromises = uniqueSymbols.map(sym => getPrice(sym));
    const priceResults = await Promise.all(pricePromises);
    const priceMap = {};
    uniqueSymbols.forEach((sym, i) => {
      priceMap[sym] = typeof priceResults[i] === 'number' ? priceResults[i] : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    });

    // –ü–æ–ª—É—á–∞–µ–º lastViews –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    const lastViews = await lastViewsCollection.find({ userId }).toArray();
    const hasPrevView = lastViews.length > 0;
    const lastViewMap = Object.fromEntries(lastViews.map(v => [v.symbol, v.lastPrice]));

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    let msg = 'üìã *–¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:*\n\n';
    const buttons = [];
    const updatePromises = [];

    for (let i = 0; i < updatedAlerts.length; i++) {
      const a = updatedAlerts[i];
      const currentPrice = priceMap[a.symbol];

      const titleLine = safeBold(`${i + 1} ${a.symbol}`);

      if (currentPrice === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') {
        msg += `${titleLine}\n‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n\n`;
        buttons.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1} –ø–∞—Ä—É`, callback_data: `del_${a._id.toString()}` }]);
        continue;
      }

      const percentText = formatPercentRemaining(a.condition, a.price, currentPrice);

      let changeSinceLast = '';
      if (hasPrevView && lastViewMap[a.symbol] !== undefined && typeof lastViewMap[a.symbol] === 'number') {
        const change = ((currentPrice - lastViewMap[a.symbol]) / lastViewMap[a.symbol]) * 100;
        changeSinceLast = `\nüìä –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${formatChangeWithIcons(change)}`;
      }

      msg += `${titleLine}\n` +
        `–£—Å–ª–æ–≤–∏–µ: ${a.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${a.price}*\n` +
        `–¢–µ–∫—É—â–∞—è: *${currentPrice}* ${percentText}${changeSinceLast}\n\n`;

      buttons.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${i + 1} –ø–∞—Ä—É`, callback_data: `del_${a._id.toString()}` }]);

      // –û–±–Ω–æ–≤–ª—è–µ–º last price –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã (—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–∏—Å—ã)
      updatePromises.push(
        lastViewsCollection.updateOne(
          { userId, symbol: a.symbol },
          { $set: { lastPrice: currentPrice } },
          { upsert: true }
        ).catch(e => console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è lastPrice –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è', e))
      );
    }

    await Promise.all(updatePromises);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤)
    try {
      await ctx.editMessageText(msg, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: buttons } });
    } catch (e) {
      // –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      await ctx.replyWithMarkdown(msg, { reply_markup: { inline_keyboard: buttons } });
    }

    await ctx.answerCbQuery('–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', err);
    try { await ctx.answerCbQuery('–û—à–∏–±–∫–∞'); } catch (e) {}
  }
});

// üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
  try {
    const allAlerts = await alertsCollection.find({}).toArray();
    if (!allAlerts.length) return;

    const uniqueSymbols = [...new Set(allAlerts.map(a => a.symbol))];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.all(uniqueSymbols.map(sym => getPrice(sym)));

    for (const alert of allAlerts) {
      const currentPrice = pricesCache.get(alert.symbol)?.price;
      if (typeof currentPrice !== 'number') continue;

      if (
        (alert.condition === '>' && currentPrice > alert.price) ||
        (alert.condition === '<' && currentPrice < alert.price)
      ) {
        await bot.telegram.sendMessage(alert.userId,
          `üîî *–°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç!*\n–ú–æ–Ω–µ—Ç–∞: **${alert.symbol}**\n–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: *${currentPrice}*\n–¢–≤–æ—ë —É—Å–ª–æ–≤–∏–µ: ${alert.condition === '>' ? '‚¨ÜÔ∏è –≤—ã—à–µ' : '‚¨áÔ∏è –Ω–∏–∂–µ'} *${alert.price}*`,
          { parse_mode: 'Markdown' }
        );
        await alertsCollection.deleteOne({ _id: alert._id });
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤:', err);
  }
}, 60000);

bot.launch().then(() => console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å MongoDB –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—ç—à–µ–º'));
